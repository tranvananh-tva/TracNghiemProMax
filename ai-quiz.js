// AI Quiz Generator Module - N√¢ng c·∫•p v·ªõi kh·∫£ nƒÉng ph√¢n t√≠ch n·ªôi dung th√¥ng minh
class AIQuizGenerator {
    constructor(quizManager) {
        this.quizManager = quizManager;
        this.initializeAIListeners();
        
        // T·ª´ ƒëi·ªÉn ng·ªØ c·∫£nh ƒë·ªÉ t·∫°o ƒë√°p √°n sai h·ª£p l√Ω
        this.contextDictionary = {
            opposites: {
                'tƒÉng': 'gi·∫£m', 'l·ªõn': 'nh·ªè', 'cao': 'th·∫•p', 'nhanh': 'ch·∫≠m',
                'm·∫°nh': 'y·∫øu', 'd√†i': 'ng·∫Øn', 'r·ªông': 'h·∫πp', 's√¢u': 'n√¥ng',
                'n√≥ng': 'l·∫°nh', 's√°ng': 't·ªëi', 'tr∆∞·ªõc': 'sau', 'tr√™n': 'd∆∞·ªõi',
                'ƒë√∫ng': 'sai', 't·ªët': 'x·∫•u', 'nhi·ªÅu': '√≠t', 'xa': 'g·∫ßn'
            },
            quantifiers: ['m·ªôt', 'hai', 'ba', 'b·ªën', 'nƒÉm', 'nhi·ªÅu', '√≠t', 'v√†i', 'h·∫ßu h·∫øt', 't·∫•t c·∫£'],
            negations: ['kh√¥ng', 'kh√¥ng ph·∫£i', 'ch∆∞a', 'ch·∫≥ng', 'kh√¥ng bao gi·ªù'],
            modifiers: ['r·∫•t', 'kh√°', 'h∆°i', 'c·ª±c k·ª≥', 'ho√†n to√†n', 'm·ªôt ph·∫ßn']
        };
    }

    initializeAIListeners() {
        // Paste AI content
        const pasteAIBtn = document.getElementById('paste-ai-content');
        if (pasteAIBtn) {
            pasteAIBtn.addEventListener('click', () => {
                this.quizManager.pasteFromClipboard('ai-content-input');
            });
        }

        // L·∫Øng nghe s·ª± ki·ªán khi ng∆∞·ªùi d√πng nh·∫≠p/d√°n n·ªôi dung
        const contentInput = document.getElementById('ai-content-input');
        if (contentInput) {
            let typingTimer;
            const doneTypingInterval = 1500; // 1.5 gi√¢y sau khi ng·ª´ng g√µ
            
            const analyzeContent = () => {
                const content = contentInput.value.trim();
                if (content.length > 100) {
                    // T·∫°o instance t·∫°m th·ªùi c·ªßa AIFileHandler n·∫øu ch∆∞a c√≥
                    if (!this.fileHandler) {
                        this.fileHandler = new AIFileHandler(this);
                    }
                    this.fileHandler.suggestOptimalQuestionCount(content);
                } else if (content.length === 0) {
                    // X√≥a ph√¢n t√≠ch n·∫øu kh√¥ng c√≥ n·ªôi dung
                    const analysisDiv = document.getElementById('content-analysis-info');
                    if (analysisDiv) {
                        analysisDiv.remove();
                    }
                }
            };
            
            contentInput.addEventListener('input', () => {
                clearTimeout(typingTimer);
                typingTimer = setTimeout(analyzeContent, doneTypingInterval);
            });
            
            // X·ª≠ l√Ω khi paste
            contentInput.addEventListener('paste', () => {
                setTimeout(analyzeContent, 100);
            });
        }

        // Generate AI quiz
        const generateBtn = document.getElementById('generate-ai-quiz');
        if (generateBtn) {
            generateBtn.addEventListener('click', () => {
                this.generateAIQuiz();
            });
        }

        // Clear AI input
        const clearAIBtn = document.getElementById('clear-ai-input');
        if (clearAIBtn) {
            clearAIBtn.addEventListener('click', () => {
                this.clearAIInputs();
            });
        }

        // Save AI quiz
        const saveAIBtn = document.getElementById('save-ai-quiz');
        if (saveAIBtn) {
            saveAIBtn.addEventListener('click', () => {
                this.saveAIQuiz();
            });
        }

        // Edit AI quiz
        const editAIBtn = document.getElementById('edit-ai-quiz');
        if (editAIBtn) {
            editAIBtn.addEventListener('click', () => {
                this.enableEditMode();
            });
        }

        // Cancel AI quiz
        const cancelAIBtn = document.getElementById('cancel-ai-quiz');
        if (cancelAIBtn) {
            cancelAIBtn.addEventListener('click', () => {
                this.cancelAIQuiz();
            });
        }
    }

    clearAIInputs() {
        document.getElementById('ai-content-input').value = '';
        document.getElementById('ai-question-count').value = '10';
        this.quizManager.showToast('üóëÔ∏è ƒê√£ x√≥a n·ªôi dung', 'info');
    }

    async generateAIQuiz() {
        const content = document.getElementById('ai-content-input').value.trim();
        const questionCount = parseInt(document.getElementById('ai-question-count').value) || 10;

        // Validation
        if (!content) {
            this.quizManager.showToast('‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung b√†i h·ªçc!', 'error');
            return;
        }

        if (content.length < 100) {
            this.quizManager.showToast('‚ö†Ô∏è N·ªôi dung qu√° ng·∫Øn! Vui l√≤ng nh·∫≠p √≠t nh·∫•t 100 k√Ω t·ª±.', 'error');
            return;
        }

        // Show loading
        document.getElementById('ai-loading').style.display = 'block';
        document.getElementById('ai-preview').style.display = 'none';

        try {
            // Simulate processing time for better UX
            await new Promise(resolve => setTimeout(resolve, 1500));

            // Ph√¢n t√≠ch n·ªôi dung tr∆∞·ªõc khi t·∫°o c√¢u h·ªèi
            const contentAnalysis = this.deepAnalyzeContent(content);
            
            if (!contentAnalysis.facts || contentAnalysis.facts.length === 0) {
                throw new Error('Kh√¥ng t√¨m th·∫•y ƒë·ªß th√¥ng tin r√µ r√†ng trong n·ªôi dung. Vui l√≤ng cung c·∫•p n·ªôi dung c√≥ c·∫•u tr√∫c r√µ r√†ng h∆°n.');
            }

            const questions = this.generateIntelligentQuestions(contentAnalysis, questionCount);
            
            if (!questions || questions.length === 0) {
                throw new Error('Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi t·ª´ n·ªôi dung n√†y. Vui l√≤ng th·ª≠ v·ªõi n·ªôi dung kh√°c.');
            }

            this.quizManager.aiGeneratedQuiz = {
                questions: questions,
                totalQuestions: questions.length,
                contentAnalysis: contentAnalysis
            };

            this.displayAIPreview(questions);
            this.quizManager.showToast(`‚ú® AI ƒë√£ ph√¢n t√≠ch v√† t·∫°o ${questions.length} c√¢u h·ªèi ch·∫•t l∆∞·ª£ng!`, 'success');

        } catch (error) {
            console.error('AI Error:', error);
            this.quizManager.showToast(`‚ùå L·ªói: ${error.message}`, 'error');
        } finally {
            document.getElementById('ai-loading').style.display = 'none';
        }
    }

    /**
     * Ph√¢n t√≠ch s√¢u n·ªôi dung ƒë·ªÉ hi·ªÉu ng·ªØ c·∫£nh v√† tr√≠ch xu·∫•t th√¥ng tin
     */
    deepAnalyzeContent(content) {
        const analysis = {
            facts: [],           // C√°c s·ª± ki·ªán/th√¥ng tin r√µ r√†ng
            definitions: [],     // C√°c ƒë·ªãnh nghƒ©a
            relationships: [],   // Quan h·ªá gi·ªØa c√°c kh√°i ni·ªám
            lists: [],          // C√°c danh s√°ch li·ªát k√™
            numbers: [],        // Th√¥ng tin s·ªë li·ªáu
            concepts: [],       // C√°c kh√°i ni·ªám ch√≠nh
            sentences: [],      // T·∫•t c·∫£ c√¢u ƒë√£ ph√¢n t√≠ch
            mainTopic: null,    // Ch·ªß ƒë·ªÅ ch√≠nh
            keywords: []        // T·ª´ kh√≥a quan tr·ªçng
        };

        // T√°ch th√†nh c√°c c√¢u v√† l·ªçc c√¢u c√≥ √Ω nghƒ©a
        const sentences = content
            .split(/[.!?]+/)
            .map(s => s.trim())
            .filter(s => s.length > 15 && s.length < 500) // L·ªçc c√¢u qu√° ng·∫Øn ho·∫∑c qu√° d√†i
            .filter(s => this.isValidSentence(s)); // Ki·ªÉm tra c√¢u h·ª£p l·ªá

        // X√°c ƒë·ªãnh ch·ªß ƒë·ªÅ ch√≠nh t·ª´ n·ªôi dung
        analysis.mainTopic = this.identifyMainTopic(content, sentences);
        analysis.keywords = this.extractKeywords(content);

        console.log('üéØ Ch·ªß ƒë·ªÅ ch√≠nh:', analysis.mainTopic);
        console.log('üîë T·ª´ kh√≥a:', analysis.keywords.slice(0, 10));

        sentences.forEach(sentence => {
            const sentenceAnalysis = this.analyzeSentence(sentence, content);
            
            // Ch·ªâ th√™m c√¢u c√≥ li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ ch√≠nh
            if (this.isRelevantToTopic(sentenceAnalysis, analysis.mainTopic, analysis.keywords)) {
                analysis.sentences.push(sentenceAnalysis);

                // Ph√¢n lo·∫°i th√¥ng tin
                if (sentenceAnalysis.type === 'definition') {
                    analysis.definitions.push(sentenceAnalysis);
                } else if (sentenceAnalysis.type === 'fact') {
                    analysis.facts.push(sentenceAnalysis);
                } else if (sentenceAnalysis.type === 'list') {
                    analysis.lists.push(sentenceAnalysis);
                } else if (sentenceAnalysis.type === 'number') {
                    analysis.numbers.push(sentenceAnalysis);
                }

                // Tr√≠ch xu·∫•t kh√°i ni·ªám
                if (sentenceAnalysis.subject) {
                    analysis.concepts.push(sentenceAnalysis.subject);
                }
            }
        });

        // Lo·∫°i b·ªè tr√πng l·∫∑p v√† s·∫Øp x·∫øp theo ƒë·ªô quan tr·ªçng
        analysis.concepts = [...new Set(analysis.concepts)];
        analysis.facts = this.rankByImportance(analysis.facts);
        analysis.definitions = this.rankByImportance(analysis.definitions);
        analysis.lists = this.rankByImportance(analysis.lists);
        analysis.numbers = this.rankByImportance(analysis.numbers);

        console.log('üìä Ph√¢n t√≠ch n·ªôi dung:', {
            'ƒê·ªãnh nghƒ©a': analysis.definitions.length,
            'S·ª± ki·ªán': analysis.facts.length,
            'Danh s√°ch': analysis.lists.length,
            'S·ªë li·ªáu': analysis.numbers.length,
            'Kh√°i ni·ªám': analysis.concepts.length,
            'C√¢u h·ª£p l·ªá': analysis.sentences.length
        });

        return analysis;
    }

    /**
     * Ki·ªÉm tra c√¢u c√≥ h·ª£p l·ªá kh√¥ng
     */
    isValidSentence(sentence) {
        // Lo·∫°i b·ªè c√¢u ch·ªâ ch·ª©a s·ªë ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát
        if (!/[a-z√°√†·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√©√®·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµƒë]/i.test(sentence)) {
            return false;
        }

        // Lo·∫°i b·ªè c√¢u c√≥ qu√° nhi·ªÅu s·ªë
        const numberCount = (sentence.match(/\d/g) || []).length;
        if (numberCount > sentence.length * 0.3) {
            return false;
        }

        // Lo·∫°i b·ªè c√¢u c√≥ qu√° nhi·ªÅu k√Ω t·ª± ƒë·∫∑c bi·ªát
        const specialCharCount = (sentence.match(/[^a-z√°√†·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√©√®·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµƒë0-9\s.,!?;:()\-‚Äì‚Äî""'']/gi) || []).length;
        if (specialCharCount > sentence.length * 0.2) {
            return false;
        }

        // C√¢u ph·∫£i c√≥ √≠t nh·∫•t 3 t·ª´
        const words = sentence.split(/\s+/).filter(w => w.length > 0);
        if (words.length < 3) {
            return false;
        }

        return true;
    }

    /**
     * X√°c ƒë·ªãnh ch·ªß ƒë·ªÅ ch√≠nh c·ªßa n·ªôi dung
     */
    identifyMainTopic(content, sentences) {
        // ƒê·∫øm t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa c√°c c·ª•m t·ª´
        const phraseFrequency = {};
        const contentLower = content.toLowerCase();

        // Tr√≠ch xu·∫•t c√°c c·ª•m danh t·ª´ (2-4 t·ª´)
        sentences.forEach(sentence => {
            const words = sentence.toLowerCase().split(/\s+/);
            
            // C·ª•m 2 t·ª´
            for (let i = 0; i < words.length - 1; i++) {
                const phrase = words.slice(i, i + 2).join(' ');
                if (phrase.length > 5) {
                    phraseFrequency[phrase] = (phraseFrequency[phrase] || 0) + 1;
                }
            }

            // C·ª•m 3 t·ª´
            for (let i = 0; i < words.length - 2; i++) {
                const phrase = words.slice(i, i + 3).join(' ');
                if (phrase.length > 8) {
                    phraseFrequency[phrase] = (phraseFrequency[phrase] || 0) + 1;
                }
            }
        });

        // T√¨m c·ª•m t·ª´ xu·∫•t hi·ªán nhi·ªÅu nh·∫•t
        const sortedPhrases = Object.entries(phraseFrequency)
            .filter(([phrase, count]) => count >= 2) // Xu·∫•t hi·ªán √≠t nh·∫•t 2 l·∫ßn
            .sort((a, b) => b[1] - a[1]);

        if (sortedPhrases.length > 0) {
            return sortedPhrases[0][0];
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y, l·∫•y t·ª´ ƒë·∫ßu ti√™n c·ªßa c√¢u ƒë·∫ßu ti√™n
        if (sentences.length > 0) {
            const firstWords = sentences[0].split(/\s+/).slice(0, 3).join(' ');
            return firstWords.toLowerCase();
        }

        return 'n·ªôi dung h·ªçc t·∫≠p';
    }

    /**
     * Tr√≠ch xu·∫•t t·ª´ kh√≥a quan tr·ªçng
     */
    extractKeywords(content) {
        const words = content.toLowerCase()
            .split(/\s+/)
            .filter(w => w.length > 3) // T·ª´ c√≥ √≠t nh·∫•t 4 k√Ω t·ª±
            .filter(w => !/^\d+$/.test(w)); // Kh√¥ng ph·∫£i s·ªë

        // ƒê·∫øm t·∫ßn su·∫•t
        const frequency = {};
        words.forEach(word => {
            frequency[word] = (frequency[word] || 0) + 1;
        });

        // Lo·∫°i b·ªè stop words ti·∫øng Vi·ªát
        const stopWords = ['c·ªßa', 'v√†', 'c√°c', 'ƒë∆∞·ª£c', 'trong', 'v·ªõi', 'cho', 't·ª´', 'n√†y', 'ƒë√≥', 'nh·ªØng', 'm·ªôt', 'c√≥', 'l√†', 'ƒë·ªÉ', 'nh∆∞', 'khi', 'ƒë√£', 's·∫Ω', 'b·ªüi', 'v·ªÅ', 'theo', 'hay', 'ho·∫∑c', 'nh∆∞ng', 'm√†', 'n·∫øu', 'th√¨'];
        
        const keywords = Object.entries(frequency)
            .filter(([word]) => !stopWords.includes(word))
            .filter(([word, count]) => count >= 2) // Xu·∫•t hi·ªán √≠t nh·∫•t 2 l·∫ßn
            .sort((a, b) => b[1] - a[1])
            .map(([word]) => word)
            .slice(0, 20);

        return keywords;
    }

    /**
     * Ki·ªÉm tra c√¢u c√≥ li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ kh√¥ng
     */
    isRelevantToTopic(sentenceAnalysis, mainTopic, keywords) {
        const sentenceLower = sentenceAnalysis.original.toLowerCase();

        // Ki·ªÉm tra c√≥ ch·ª©a ch·ªß ƒë·ªÅ ch√≠nh
        if (mainTopic && sentenceLower.includes(mainTopic)) {
            return true;
        }

        // Ki·ªÉm tra c√≥ ch·ª©a √≠t nh·∫•t 1 t·ª´ kh√≥a quan tr·ªçng
        const matchedKeywords = keywords.filter(kw => sentenceLower.includes(kw));
        if (matchedKeywords.length >= 1) {
            return true;
        }

        // N·∫øu l√† ƒë·ªãnh nghƒ©a ho·∫∑c danh s√°ch, ∆∞u ti√™n gi·ªØ l·∫°i
        if (sentenceAnalysis.type === 'definition' || sentenceAnalysis.type === 'list') {
            return true;
        }

        return false;
    }

    /**
     * Ph√¢n t√≠ch m·ªôt c√¢u ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i v√† tr√≠ch xu·∫•t th√¥ng tin
     */
    analyzeSentence(sentence, fullContent) {
        const analysis = {
            original: sentence,
            type: 'general',
            subject: null,
            predicate: null,
            objects: [],
            keywords: [],
            importance: 0
        };

        // Ph√°t hi·ªán ƒë·ªãnh nghƒ©a
        const definitionPatterns = [
            /(.+?)\s+(l√†|ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a l√†|nghƒ©a l√†|t·ª©c l√†|ch√≠nh l√†|c√≥ nghƒ©a l√†)\s+(.+)/i,
            /(.+?)\s+ƒë∆∞·ª£c g·ªçi l√†\s+(.+)/i,
            /(.+?)\s+l√† m·ªôt\s+(.+)/i
        ];

        for (const pattern of definitionPatterns) {
            const match = sentence.match(pattern);
            if (match) {
                analysis.type = 'definition';
                analysis.subject = match[1].trim();
                analysis.predicate = match[2].trim();
                analysis.objects = [match[3] ? match[3].trim() : match[2].trim()];
                analysis.importance = 10;
                return analysis;
            }
        }

        // Ph√°t hi·ªán danh s√°ch
        const listPatterns = [
            /(.+?)\s+(bao g·ªìm|g·ªìm c√≥|c√≥|nh∆∞|v√≠ d·ª•|l√†)\s*:?\s*(.+)/i
        ];

        for (const pattern of listPatterns) {
            const match = sentence.match(pattern);
            if (match && (match[3].includes(',') || match[3].includes('v√†'))) {
                analysis.type = 'list';
                analysis.subject = match[1].trim();
                analysis.objects = this.extractListItems(match[3]);
                analysis.importance = 8;
                return analysis;
            }
        }

        // Ph√°t hi·ªán s·ªë li·ªáu
        const numberMatch = sentence.match(/(\d+)\s*([a-z√°√†·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√©√®·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµƒë]+)/i);
        if (numberMatch) {
            analysis.type = 'number';
            analysis.subject = numberMatch[2];
            analysis.objects = [numberMatch[1]];
            analysis.importance = 7;
            return analysis;
        }

        // Ph√°t hi·ªán s·ª± ki·ªán/th√¥ng tin quan tr·ªçng
        const importantKeywords = ['quan tr·ªçng', 'ch√≠nh', 'c·∫ßn', 'ph·∫£i', 'ƒë·∫∑c bi·ªát', 'n·ªïi b·∫≠t', 'ch·ªß y·∫øu'];
        const hasImportantKeyword = importantKeywords.some(kw => sentence.toLowerCase().includes(kw));
        
        if (hasImportantKeyword || sentence.length > 40) {
            analysis.type = 'fact';
            analysis.importance = 6;
            
            // Tr√≠ch xu·∫•t ch·ªß ng·ªØ (th∆∞·ªùng l√† danh t·ª´ ƒë·∫ßu c√¢u)
            const words = sentence.split(/\s+/);
            if (words.length > 0) {
                analysis.subject = words.slice(0, Math.min(3, words.length)).join(' ');
            }
        }

        return analysis;
    }

    /**
     * Tr√≠ch xu·∫•t c√°c ph·∫ßn t·ª≠ trong danh s√°ch
     */
    extractListItems(text) {
        // T√°ch theo d·∫•u ph·∫©y v√† "v√†"
        const items = text
            .split(/[,;]|\s+v√†\s+/)
            .map(item => item.trim())
            .filter(item => item.length > 0 && item.length < 100);
        
        return items;
    }

    /**
     * X·∫øp h·∫°ng theo ƒë·ªô quan tr·ªçng
     */
    rankByImportance(items) {
        return items.sort((a, b) => b.importance - a.importance);
    }

    /**
     * T·∫°o c√¢u h·ªèi th√¥ng minh d·ª±a tr√™n ph√¢n t√≠ch n·ªôi dung
     */
    generateIntelligentQuestions(analysis, maxQuestions) {
        const questions = [];
        const usedContent = new Set(); // Tr√°nh t·∫°o c√¢u h·ªèi tr√πng l·∫∑p
        const usedSubjects = new Set(); // Tr√°nh h·ªèi v·ªÅ c√πng m·ªôt ch·ªß ƒë·ªÅ qu√° nhi·ªÅu

        console.log('üî® B·∫Øt ƒë·∫ßu t·∫°o c√¢u h·ªèi...');

        // 1. T·∫°o c√¢u h·ªèi t·ª´ ƒë·ªãnh nghƒ©a (∆∞u ti√™n cao nh·∫•t)
        for (const def of analysis.definitions) {
            if (questions.length >= maxQuestions) break;
            
            const question = this.createDefinitionQuestion(def, analysis);
            if (this.isValidQuestion(question, usedContent, usedSubjects)) {
                questions.push(question);
                usedContent.add(def.original);
                if (def.subject) usedSubjects.add(def.subject.toLowerCase());
                console.log(`‚úÖ C√¢u ${questions.length}: ƒê·ªãnh nghƒ©a - ${question.question}`);
            }
        }

        // 2. T·∫°o c√¢u h·ªèi t·ª´ danh s√°ch
        for (const list of analysis.lists) {
            if (questions.length >= maxQuestions) break;
            
            const question = this.createListQuestion(list, analysis);
            if (this.isValidQuestion(question, usedContent, usedSubjects)) {
                questions.push(question);
                usedContent.add(list.original);
                if (list.subject) usedSubjects.add(list.subject.toLowerCase());
                console.log(`‚úÖ C√¢u ${questions.length}: Danh s√°ch - ${question.question}`);
            }
        }

        // 3. T·∫°o c√¢u h·ªèi t·ª´ s·ªë li·ªáu
        for (const num of analysis.numbers) {
            if (questions.length >= maxQuestions) break;
            
            const question = this.createNumberQuestion(num, analysis);
            if (this.isValidQuestion(question, usedContent, usedSubjects)) {
                questions.push(question);
                usedContent.add(num.original);
                if (num.subject) usedSubjects.add(num.subject.toLowerCase());
                console.log(`‚úÖ C√¢u ${questions.length}: S·ªë li·ªáu - ${question.question}`);
            }
        }

        // 4. T·∫°o c√¢u h·ªèi t·ª´ s·ª± ki·ªán
        for (const fact of analysis.facts) {
            if (questions.length >= maxQuestions) break;
            
            const question = this.createFactQuestion(fact, analysis);
            if (this.isValidQuestion(question, usedContent, usedSubjects)) {
                questions.push(question);
                usedContent.add(fact.original);
                if (fact.subject) usedSubjects.add(fact.subject.toLowerCase());
                console.log(`‚úÖ C√¢u ${questions.length}: S·ª± ki·ªán - ${question.question}`);
            }
        }

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng c√¢u h·ªèi t·ªëi thi·ªÉu
        if (questions.length < Math.min(5, maxQuestions)) {
            console.warn('‚ö†Ô∏è Kh√¥ng ƒë·ªß c√¢u h·ªèi ch·∫•t l∆∞·ª£ng cao');
            throw new Error(`Ch·ªâ t·∫°o ƒë∆∞·ª£c ${questions.length} c√¢u h·ªèi ch·∫•t l∆∞·ª£ng. Vui l√≤ng cung c·∫•p n·ªôi dung chi ti·∫øt h∆°n v·ªõi √≠t nh·∫•t 5-10 th√¥ng tin r√µ r√†ng.`);
        }

        // Ki·ªÉm tra t√≠nh ƒëa d·∫°ng c·ªßa c√¢u h·ªèi
        if (!this.hasQuestionDiversity(questions)) {
            console.warn('‚ö†Ô∏è C√¢u h·ªèi thi·∫øu ƒëa d·∫°ng');
        }

        // X√°o tr·ªôn v·ªã tr√≠ ƒë√°p √°n ƒë√∫ng
        const finalQuestions = this.randomizeCorrectAnswers(questions);
        
        console.log(`üéâ Ho√†n th√†nh: ${finalQuestions.length} c√¢u h·ªèi ch·∫•t l∆∞·ª£ng cao`);
        
        return finalQuestions;
    }

    /**
     * Ki·ªÉm tra c√¢u h·ªèi c√≥ h·ª£p l·ªá kh√¥ng
     */
    isValidQuestion(question, usedContent, usedSubjects) {
        if (!question) {
            return false;
        }

        // Ki·ªÉm tra c√¢u h·ªèi c√≥ ƒë·ªß th√¥ng tin
        if (!question.question || !question.correctAnswer || !question.wrongAnswers) {
            return false;
        }

        // Ki·ªÉm tra c√≥ ƒë·ªß 3 ƒë√°p √°n sai
        if (question.wrongAnswers.length < 3) {
            console.log(`‚ùå Kh√¥ng ƒë·ªß ƒë√°p √°n sai cho: ${question.question}`);
            return false;
        }

        // Ki·ªÉm tra ƒë√°p √°n sai kh√¥ng tr√πng v·ªõi ƒë√°p √°n ƒë√∫ng
        const allAnswers = [question.correctAnswer, ...question.wrongAnswers];
        const uniqueAnswers = new Set(allAnswers.map(a => a.toLowerCase().trim()));
        if (uniqueAnswers.size < 4) {
            console.log(`‚ùå ƒê√°p √°n b·ªã tr√πng l·∫∑p: ${question.question}`);
            return false;
        }

        // Ki·ªÉm tra ƒë·ªô d√†i ƒë√°p √°n h·ª£p l√Ω
        for (const answer of allAnswers) {
            if (answer.length < 2 || answer.length > 300) {
                console.log(`‚ùå ƒê√°p √°n kh√¥ng h·ª£p l·ªá (qu√° ng·∫Øn/d√†i): ${answer}`);
                return false;
            }
        }

        // Ki·ªÉm tra kh√¥ng h·ªèi qu√° nhi·ªÅu v·ªÅ c√πng m·ªôt ch·ªß ƒë·ªÅ
        if (question.source) {
            const subjectWords = question.question.toLowerCase().split(/\s+/).slice(0, 3).join(' ');
            if (usedSubjects.has(subjectWords)) {
                const count = Array.from(usedSubjects).filter(s => s.includes(subjectWords) || subjectWords.includes(s)).length;
                if (count >= 3) {
                    console.log(`‚ö†Ô∏è ƒê√£ h·ªèi qu√° nhi·ªÅu v·ªÅ ch·ªß ƒë·ªÅ: ${subjectWords}`);
                    return false;
                }
            }
        }

        // Ki·ªÉm tra ƒë√°p √°n sai c√≥ h·ª£p l√Ω kh√¥ng (kh√¥ng qu√° kh√°c bi·ªát)
        const correctLength = question.correctAnswer.length;
        for (const wrong of question.wrongAnswers) {
            const lengthRatio = wrong.length / correctLength;
            if (lengthRatio < 0.3 || lengthRatio > 3) {
                console.log(`‚ö†Ô∏è ƒê√°p √°n sai qu√° kh√°c bi·ªát v·ªÅ ƒë·ªô d√†i: ${wrong}`);
                // Kh√¥ng reject ho√†n to√†n, ch·ªâ c·∫£nh b√°o
            }
        }

        return true;
    }

    /**
     * Ki·ªÉm tra t√≠nh ƒëa d·∫°ng c·ªßa c√¢u h·ªèi
     */
    hasQuestionDiversity(questions) {
        if (questions.length < 3) {
            return true; // Qu√° √≠t c√¢u ƒë·ªÉ ƒë√°nh gi√°
        }

        const types = questions.map(q => q.type);
        const uniqueTypes = new Set(types);

        // N√™n c√≥ √≠t nh·∫•t 2 lo·∫°i c√¢u h·ªèi kh√°c nhau
        if (uniqueTypes.size < 2) {
            console.warn('‚ö†Ô∏è T·∫•t c·∫£ c√¢u h·ªèi c√πng m·ªôt lo·∫°i');
            return false;
        }

        return true;
    }

    /**
     * T·∫°o c√¢u h·ªèi t·ª´ ƒë·ªãnh nghƒ©a
     */
    createDefinitionQuestion(def, analysis) {
        if (!def.subject || !def.objects || def.objects.length === 0) {
            return null;
        }

        const correctAnswer = def.objects[0];
        const subject = def.subject;

        // Ki·ªÉm tra ƒë·ªô d√†i h·ª£p l√Ω
        if (correctAnswer.length < 10 || correctAnswer.length > 300) {
            return null;
        }

        // T·∫°o c√°c ƒë√°p √°n sai d·ª±a tr√™n n·ªôi dung th·ª±c t·∫ø
        const wrongAnswers = this.generateContextualWrongAnswers(
            correctAnswer,
            analysis,
            'definition',
            subject
        );

        if (wrongAnswers.length < 3) {
            console.log(`‚ö†Ô∏è Kh√¥ng ƒë·ªß ƒë√°p √°n sai cho ƒë·ªãnh nghƒ©a: ${subject}`);
            return null;
        }

        // T·∫°o nhi·ªÅu d·∫°ng c√¢u h·ªèi kh√°c nhau
        const questionTemplates = [
            `${subject} l√† g√¨?`,
            `ƒê·ªãnh nghƒ©a n√†o sau ƒë√¢y ƒë√∫ng v·ªÅ ${subject}?`,
            `${subject} ƒë∆∞·ª£c hi·ªÉu nh∆∞ th·∫ø n√†o?`,
            `Kh√°i ni·ªám ${subject} c√≥ nghƒ©a l√† g√¨?`
        ];

        const selectedQuestion = questionTemplates[Math.floor(Math.random() * questionTemplates.length)];

        return {
            question: selectedQuestion,
            correctAnswer: correctAnswer,
            wrongAnswers: wrongAnswers,
            type: 'definition',
            source: def.original
        };
    }

    /**
     * T·∫°o c√¢u h·ªèi t·ª´ danh s√°ch
     */
    createListQuestion(list, analysis) {
        if (!list.subject || !list.objects || list.objects.length < 2) {
            return null;
        }

        const questionTypes = [
            // H·ªèi v·ªÅ m·ªôt ph·∫ßn t·ª≠ trong danh s√°ch
            () => {
                const correctItem = list.objects[Math.floor(Math.random() * list.objects.length)];
                const wrongAnswers = this.generateWrongListItems(correctItem, list.objects, analysis);
                
                return {
                    question: `ƒêi·ªÅu n√†o sau ƒë√¢y thu·ªôc v·ªÅ ${list.subject}?`,
                    correctAnswer: correctItem,
                    wrongAnswers: wrongAnswers,
                    type: 'list',
                    source: list.original
                };
            },
            // H·ªèi v·ªÅ s·ªë l∆∞·ª£ng
            () => {
                const count = list.objects.length;
                const wrongCounts = [
                    count - 1,
                    count + 1,
                    count + 2
                ].filter(n => n > 0).map(n => `${n} ${this.getCountUnit(list.subject)}`);

                return {
                    question: `${list.subject} c√≥ bao nhi√™u ph·∫ßn t·ª≠/th√†nh ph·∫ßn?`,
                    correctAnswer: `${count} ${this.getCountUnit(list.subject)}`,
                    wrongAnswers: wrongCounts,
                    type: 'list-count',
                    source: list.original
                };
            }
        ];

        const selectedType = questionTypes[Math.floor(Math.random() * questionTypes.length)];
        return selectedType();
    }

    /**
     * T·∫°o c√¢u h·ªèi t·ª´ s·ªë li·ªáu
     */
    createNumberQuestion(num, analysis) {
        if (!num.subject || !num.objects || num.objects.length === 0) {
            return null;
        }

        const correctNumber = num.objects[0];
        const subject = num.subject;

        // T·∫°o c√°c s·ªë g·∫ßn ƒë√∫ng
        const wrongNumbers = this.generateWrongNumbers(parseInt(correctNumber));

        return {
            question: `C√≥ bao nhi√™u ${subject} ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong n·ªôi dung?`,
            correctAnswer: correctNumber,
            wrongAnswers: wrongNumbers.map(n => n.toString()),
            type: 'number',
            source: num.original
        };
    }

    /**
     * T·∫°o c√¢u h·ªèi t·ª´ s·ª± ki·ªán
     */
    createFactQuestion(fact, analysis) {
        if (!fact.subject || fact.original.length < 20) {
            return null;
        }

        const correctAnswer = fact.original;
        const wrongAnswers = this.generateContextualWrongAnswers(
            correctAnswer,
            analysis,
            'fact'
        );

        if (wrongAnswers.length < 2) {
            return null;
        }

        return {
            question: `ƒêi·ªÅu n√†o sau ƒë√¢y ƒë√∫ng v·ªÅ ${fact.subject}?`,
            correctAnswer: correctAnswer,
            wrongAnswers: wrongAnswers,
            type: 'fact',
            source: fact.original
        };
    }

    /**
     * T·∫°o ƒë√°p √°n sai d·ª±a tr√™n ng·ªØ c·∫£nh th·ª±c t·∫ø
     */
    generateContextualWrongAnswers(correctAnswer, analysis, type, subject = null) {
        const wrongAnswers = [];
        const correctLower = correctAnswer.toLowerCase();
        const correctLength = correctAnswer.length;

        console.log(`üîç T·∫°o ƒë√°p √°n sai cho: "${correctAnswer.substring(0, 50)}..."`);

        // Chi·∫øn l∆∞·ª£c 1: S·ª≠ d·ª•ng th√¥ng tin t·ª´ c√°c c√¢u kh√°c trong n·ªôi dung (∆∞u ti√™n cao nh·∫•t)
        if (type === 'definition' || type === 'fact') {
            // L·∫•y c√°c c√¢u c√≥ ƒë·ªô d√†i t∆∞∆°ng t·ª±
            const similarLengthSentences = analysis.sentences
                .filter(s => {
                    const lengthRatio = s.original.length / correctLength;
                    return s.original !== correctAnswer && 
                           lengthRatio >= 0.5 && lengthRatio <= 2 &&
                           s.original.length >= 20 && s.original.length <= 300;
                })
                .slice(0, 10);

            for (const sent of similarLengthSentences) {
                if (wrongAnswers.length >= 3) break;
                
                // ƒê·∫£m b·∫£o ƒë√°p √°n sai kh√¥ng qu√° gi·ªëng ƒë√°p √°n ƒë√∫ng
                const similarity = this.calculateSimilarity(correctAnswer, sent.original);
                if (similarity < 0.5 && similarity > 0.1) { // Kh√¥ng qu√° gi·ªëng, kh√¥ng qu√° kh√°c
                    // Ki·ªÉm tra kh√¥ng tr√πng v·ªõi ƒë√°p √°n ƒë√£ c√≥
                    const isDuplicate = wrongAnswers.some(wa => 
                        this.calculateSimilarity(wa, sent.original) > 0.7
                    );
                    
                    if (!isDuplicate) {
                        wrongAnswers.push(sent.original);
                        console.log(`  ‚úì ƒê√°p √°n sai t·ª´ n·ªôi dung: "${sent.original.substring(0, 40)}..."`);
                    }
                }
            }
        }

        // Chi·∫øn l∆∞·ª£c 2: T·∫°o bi·∫øn th·ªÉ h·ª£p l√Ω b·∫±ng c√°ch thay ƒë·ªïi t·ª´ kh√≥a
        if (wrongAnswers.length < 3) {
            const variants = this.createReasonableVariants(correctAnswer, analysis);
            for (const variant of variants) {
                if (wrongAnswers.length >= 3) break;
                
                // Ki·ªÉm tra kh√¥ng tr√πng
                const isDuplicate = wrongAnswers.some(wa => 
                    this.calculateSimilarity(wa, variant) > 0.7
                );
                
                if (!isDuplicate && variant !== correctAnswer) {
                    wrongAnswers.push(variant);
                    console.log(`  ‚úì ƒê√°p √°n sai bi·∫øn th·ªÉ: "${variant.substring(0, 40)}..."`);
                }
            }
        }

        // Chi·∫øn l∆∞·ª£c 3: S·ª≠ d·ª•ng ph·ªß ƒë·ªãnh c√≥ ng·ªØ c·∫£nh
        if (wrongAnswers.length < 3) {
            const negation = this.createContextualNegation(correctAnswer);
            if (negation && negation !== correctAnswer) {
                const isDuplicate = wrongAnswers.some(wa => 
                    this.calculateSimilarity(wa, negation) > 0.7
                );
                
                if (!isDuplicate) {
                    wrongAnswers.push(negation);
                    console.log(`  ‚úì ƒê√°p √°n sai ph·ªß ƒë·ªãnh: "${negation.substring(0, 40)}..."`);
                }
            }
        }

        // Chi·∫øn l∆∞·ª£c 4: T·∫°o ƒë√°p √°n t·ª´ c√°c kh√°i ni·ªám kh√°c trong analysis
        if (wrongAnswers.length < 3 && analysis.definitions.length > 1) {
            for (const def of analysis.definitions) {
                if (wrongAnswers.length >= 3) break;
                
                if (def.objects && def.objects[0] !== correctAnswer) {
                    const otherDef = def.objects[0];
                    const similarity = this.calculateSimilarity(correctAnswer, otherDef);
                    
                    if (similarity < 0.5 && similarity > 0.1) {
                        const isDuplicate = wrongAnswers.some(wa => 
                            this.calculateSimilarity(wa, otherDef) > 0.7
                        );
                        
                        if (!isDuplicate) {
                            wrongAnswers.push(otherDef);
                            console.log(`  ÔøΩÔøΩ ƒê√°p √°n sai t·ª´ ƒë·ªãnh nghƒ©a kh√°c: "${otherDef.substring(0, 40)}..."`);
                        }
                    }
                }
            }
        }

        // ƒê·∫£m b·∫£o c√≥ ƒë·ªß 3 ƒë√°p √°n sai
        if (wrongAnswers.length < 3) {
            console.warn(`  ‚ö†Ô∏è Ch·ªâ t·∫°o ƒë∆∞·ª£c ${wrongAnswers.length} ƒë√°p √°n sai`);
        }

        return wrongAnswers.slice(0, 3);
    }

    /**
     * T·∫°o bi·∫øn th·ªÉ h·ª£p l√Ω c·ªßa c√¢u tr·∫£ l·ªùi
     */
    createReasonableVariants(text, analysis) {
        const variants = [];
        const words = text.split(/\s+/);

        // Thay th·∫ø t·ª´ b·∫±ng t·ª´ tr√°i nghƒ©a (ch·ªâ thay 1-2 t·ª´ ƒë·ªÉ gi·ªØ ng·ªØ c·∫£nh)
        let oppositeCount = 0;
        for (const [word, opposite] of Object.entries(this.contextDictionary.opposites)) {
            if (oppositeCount >= 2) break;
            
            if (text.toLowerCase().includes(word)) {
                const variant = text.replace(new RegExp(`\\b${word}\\b`, 'gi'), opposite);
                if (variant !== text && variant.length >= 10) {
                    variants.push(variant);
                    oppositeCount++;
                }
            }
        }

        // Thay ƒë·ªïi s·ªë l∆∞·ª£ng (ch·ªâ n·∫øu c√≥ t·ª´ ch·ªâ s·ªë l∆∞·ª£ng)
        for (const quantifier of this.contextDictionary.quantifiers) {
            if (variants.length >= 5) break;
            
            if (text.toLowerCase().includes(quantifier)) {
                const otherQuantifiers = this.contextDictionary.quantifiers.filter(q => q !== quantifier);
                const randomQuantifier = otherQuantifiers[Math.floor(Math.random() * otherQuantifiers.length)];
                const variant = text.replace(new RegExp(`\\b${quantifier}\\b`, 'gi'), randomQuantifier);
                if (variant !== text && variant.length >= 10) {
                    variants.push(variant);
                }
            }
        }

        // Thay ƒë·ªïi m·ªôt ph·∫ßn c·ªßa c√¢u b·∫±ng th√¥ng tin t·ª´ analysis
        if (variants.length < 3 && analysis.keywords.length > 0) {
            const textWords = text.toLowerCase().split(/\s+/);
            const matchedKeywords = analysis.keywords.filter(kw => textWords.includes(kw));
            
            if (matchedKeywords.length > 0) {
                const keywordToReplace = matchedKeywords[0];
                const otherKeywords = analysis.keywords.filter(kw => kw !== keywordToReplace);
                
                if (otherKeywords.length > 0) {
                    const newKeyword = otherKeywords[Math.floor(Math.random() * otherKeywords.length)];
                    const variant = text.replace(new RegExp(`\\b${keywordToReplace}\\b`, 'gi'), newKeyword);
                    if (variant !== text && variant.length >= 10) {
                        variants.push(variant);
                    }
                }
            }
        }

        // Ch·ªâ th√™m modifier n·∫øu c√¢u ng·∫Øn
        if (variants.length < 3 && text.length < 100) {
            const modifier = this.contextDictionary.modifiers[Math.floor(Math.random() * this.contextDictionary.modifiers.length)];
            const variant = `${modifier} ${text}`;
            if (variant.length <= 300) {
                variants.push(variant);
            }
        }

        return variants.filter(v => v.length >= 10 && v.length <= 300);
    }

    /**
     * T·∫°o ph·ªß ƒë·ªãnh c√≥ ng·ªØ c·∫£nh
     */
    createContextualNegation(text) {
        // Kh√¥ng ch·ªâ th√™m "kh√¥ng" ƒë∆°n gi·∫£n, m√† t·∫°o c√¢u ph·ªß ƒë·ªãnh c√≥ nghƒ©a
        const negation = this.contextDictionary.negations[Math.floor(Math.random() * this.contextDictionary.negations.length)];
        
        // N·∫øu c√¢u ƒë√£ c√≥ ƒë·ªông t·ª´ "l√†", th√™m ph·ªß ƒë·ªãnh tr∆∞·ªõc ƒë·ªông t·ª´
        if (text.includes(' l√† ')) {
            return text.replace(' l√† ', ` ${negation} l√† `);
        }
        
        // Ng∆∞·ª£c l·∫°i, th√™m ph·ªß ƒë·ªãnh ·ªü ƒë·∫ßu c√¢u
        return `${negation.charAt(0).toUpperCase() + negation.slice(1)} ${text.toLowerCase()}`;
    }

    /**
     * T·∫°o ƒë√°p √°n sai cho c√¢u h·ªèi danh s√°ch
     */
    generateWrongListItems(correctItem, allItems, analysis) {
        const wrongItems = [];

        // L·∫•y c√°c items kh√°c trong c√πng danh s√°ch
        const otherItems = allItems.filter(item => item !== correctItem);
        if (otherItems.length > 0) {
            wrongItems.push(...otherItems.slice(0, 2));
        }

        // N·∫øu kh√¥ng ƒë·ªß, t·∫°o items t·ª´ c√°c danh s√°ch kh√°c
        if (wrongItems.length < 3) {
            for (const list of analysis.lists) {
                if (wrongItems.length >= 3) break;
                
                for (const item of list.objects) {
                    if (!allItems.includes(item) && !wrongItems.includes(item)) {
                        wrongItems.push(item);
                        if (wrongItems.length >= 3) break;
                    }
                }
            }
        }

        // N·∫øu v·∫´n kh√¥ng ƒë·ªß, t·∫°o bi·∫øn th·ªÉ
        if (wrongItems.length < 3) {
            const variants = this.createReasonableVariants(correctItem);
            wrongItems.push(...variants.slice(0, 3 - wrongItems.length));
        }

        return wrongItems.slice(0, 3);
    }

    /**
     * T·∫°o s·ªë sai h·ª£p l√Ω
     */
    generateWrongNumbers(correctNum) {
        const wrongNumbers = [];
        
        // S·ªë g·∫ßn ƒë√∫ng
        wrongNumbers.push(correctNum - 1);
        wrongNumbers.push(correctNum + 1);
        
        // S·ªë kh√°c bi·ªát h∆°n
        if (correctNum > 10) {
            wrongNumbers.push(Math.floor(correctNum / 2));
            wrongNumbers.push(correctNum * 2);
        } else {
            wrongNumbers.push(correctNum + 2);
            wrongNumbers.push(correctNum + 3);
        }

        return wrongNumbers.filter(n => n > 0 && n !== correctNum).slice(0, 3);
    }

    /**
     * T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·ªØa hai chu·ªói
     */
    calculateSimilarity(str1, str2) {
        const words1 = new Set(str1.toLowerCase().split(/\s+/));
        const words2 = new Set(str2.toLowerCase().split(/\s+/));
        
        const intersection = new Set([...words1].filter(x => words2.has(x)));
        const union = new Set([...words1, ...words2]);
        
        return intersection.size / union.size;
    }

    /**
     * L·∫•y ƒë∆°n v·ªã ƒë·∫øm ph√π h·ª£p
     */
    getCountUnit(subject) {
        const lowerSubject = subject.toLowerCase();
        
        if (lowerSubject.includes('ng∆∞·ªùi') || lowerSubject.includes('c√° nh√¢n')) {
            return 'ng∆∞·ªùi';
        } else if (lowerSubject.includes('lo·∫°i') || lowerSubject.includes('ki·ªÉu')) {
            return 'lo·∫°i';
        } else if (lowerSubject.includes('ph·∫ßn') || lowerSubject.includes('th√†nh ph·∫ßn')) {
            return 'ph·∫ßn';
        } else {
            return 'c√°i';
        }
    }

    /**
     * X√°o tr·ªôn v·ªã tr√≠ ƒë√°p √°n ƒë√∫ng
     */
    randomizeCorrectAnswers(questions) {
        const letters = ['A', 'B', 'C', 'D'];
        const answerDistribution = { 'A': 0, 'B': 0, 'C': 0, 'D': 0 };
        
        const finalQuestions = questions.map((q, index) => {
            // Ch·ªçn v·ªã tr√≠ ng·∫´u nhi√™n cho ƒë√°p √°n ƒë√∫ng
            let correctPosition;
            
            // ƒê·∫£m b·∫£o ph√¢n b·ªë ƒë·ªÅu c√°c ƒë√°p √°n
            if (index < 4) {
                correctPosition = index;
            } else {
                const minCount = Math.min(...Object.values(answerDistribution));
                const leastUsedAnswers = Object.keys(answerDistribution)
                    .filter(key => answerDistribution[key] === minCount);
                
                const randomLetter = leastUsedAnswers[Math.floor(Math.random() * leastUsedAnswers.length)];
                correctPosition = letters.indexOf(randomLetter);
            }
            
            // T·∫°o m·∫£ng t·∫•t c·∫£ ƒë√°p √°n
            const allAnswers = [q.correctAnswer, ...q.wrongAnswers].slice(0, 4);
            
            // X√°o tr·ªôn ƒë·ªÉ ƒë√°p √°n ƒë√∫ng ·ªü v·ªã tr√≠ m·ªõi
            const shuffledAnswers = [];
            const tempAnswers = [...allAnswers];
            
            // ƒê·∫∑t ƒë√°p √°n ƒë√∫ng v√†o v·ªã tr√≠ ƒë√£ ch·ªçn
            shuffledAnswers[correctPosition] = q.correctAnswer;
            tempAnswers.splice(tempAnswers.indexOf(q.correctAnswer), 1);
            
            // ƒêi·ªÅn c√°c ƒë√°p √°n sai v√†o c√°c v·ªã tr√≠ c√≤n l·∫°i
            let wrongIndex = 0;
            for (let i = 0; i < 4; i++) {
                if (i !== correctPosition && wrongIndex < tempAnswers.length) {
                    shuffledAnswers[i] = tempAnswers[wrongIndex];
                    wrongIndex++;
                }
            }
            
            // T·∫°o options
            const options = shuffledAnswers.map((answer, i) => ({
                letter: letters[i],
                text: answer
            }));
            
            answerDistribution[letters[correctPosition]]++;
            
            return {
                question: q.question,
                options: options,
                correctAnswer: letters[correctPosition],
                type: q.type,
                source: q.source
            };
        });
        
        console.log('üìä Ph√¢n b·ªë ƒë√°p √°n ƒë√∫ng:', answerDistribution);
        
        return finalQuestions;
    }

    displayAIPreview(questions) {
        const previewContent = document.getElementById('ai-quiz-preview-content');
        const questionTotal = document.getElementById('ai-question-total');
        
        questionTotal.textContent = questions.length;

        const questionsHTML = questions.map((q, index) => `
            <div class="preview-question" data-index="${index}">
                <div class="preview-question-header">
                    <div class="preview-question-number">${index + 1}</div>
                    <div class="preview-question-text" contenteditable="false">${q.question}</div>
                </div>
                <div class="preview-options">
                    ${q.options.map(opt => `
                        <div class="preview-option ${opt.letter === q.correctAnswer ? 'correct' : ''}" data-letter="${opt.letter}">
                            <span class="preview-option-letter">${opt.letter}.</span>
                            <span class="preview-option-text" contenteditable="false">${opt.text}</span>
                        </div>
                    `).join('')}
                </div>
                <div class="preview-correct-answer">
                    <i class="fas fa-check-circle"></i>
                    ƒê√°p √°n ƒë√∫ng: ${q.correctAnswer}
                </div>
                ${q.source ? `<div class="preview-source" style="font-size: 0.85em; color: #666; margin-top: 8px; font-style: italic;">Ngu·ªìn: "${q.source.substring(0, 80)}${q.source.length > 80 ? '...' : ''}"</div>` : ''}
            </div>
        `).join('');

        previewContent.innerHTML = questionsHTML;
        
        document.getElementById('ai-preview').style.display = 'block';
        document.getElementById('ai-preview').scrollIntoView({ behavior: 'smooth' });
    }

    enableEditMode() {
        const questions = document.querySelectorAll('.preview-question');
        questions.forEach(q => {
            q.classList.add('editable');
            const questionText = q.querySelector('.preview-question-text');
            const optionTexts = q.querySelectorAll('.preview-option-text');
            
            questionText.contentEditable = 'true';
            optionTexts.forEach(opt => {
                opt.contentEditable = 'true';
            });

            // Add click handler for correct answer selection
            const options = q.querySelectorAll('.preview-option');
            options.forEach(opt => {
                opt.style.cursor = 'pointer';
                opt.addEventListener('click', () => {
                    options.forEach(o => o.classList.remove('correct'));
                    opt.classList.add('correct');
                    
                    const letter = opt.dataset.letter;
                    const correctAnswerDiv = q.querySelector('.preview-correct-answer');
                    correctAnswerDiv.innerHTML = `
                        <i class="fas fa-check-circle"></i>
                        ƒê√°p √°n ƒë√∫ng: ${letter}
                    `;
                });
            });
        });

        this.quizManager.showToast('‚úèÔ∏è Ch·∫ø ƒë·ªô ch·ªânh s·ª≠a ƒë√£ b·∫≠t. Click v√†o ƒë√°p √°n ƒë·ªÉ ch·ªçn ƒë√°p √°n ƒë√∫ng.', 'info');
    }

    saveAIQuiz() {
        const quizName = document.getElementById('ai-quiz-name').value.trim();
        
        if (!quizName) {
            this.quizManager.showToast('‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n cho quiz!', 'error');
            return;
        }

        // Collect edited questions
        const questions = [];
        const questionElements = document.querySelectorAll('.preview-question');
        
        questionElements.forEach((qEl, index) => {
            const questionText = qEl.querySelector('.preview-question-text').textContent.trim();
            const options = [];
            let correctAnswer = '';

            qEl.querySelectorAll('.preview-option').forEach(optEl => {
                const letter = optEl.dataset.letter;
                const text = optEl.querySelector('.preview-option-text').textContent.trim();
                
                options.push({ letter, text });
                
                if (optEl.classList.contains('correct')) {
                    correctAnswer = letter;
                }
            });

            questions.push({
                question: questionText,
                options: options,
                correctAnswer: correctAnswer
            });
        });

        // Create quiz object
        const quiz = {
            id: Date.now().toString(),
            title: quizName,
            description: 'Quiz ƒë∆∞·ª£c t·∫°o b·ªüi AI th√¥ng minh - Ph√¢n t√≠ch v√† hi·ªÉu n·ªôi dung',
            questions: questions,
            createdAt: new Date().toISOString(),
            totalQuestions: questions.length
        };

        // Save to quizzes
        this.quizManager.quizzes.push(quiz);
        this.quizManager.saveQuizzes();
        this.quizManager.loadQuizList();
        this.quizManager.updateQuizSelector();

        // Clear and switch tab
        this.cancelAIQuiz();
        this.quizManager.switchTab('manage');
        
        this.quizManager.showToast(`üéâ ƒê√£ l∆∞u quiz "${quizName}" v·ªõi ${questions.length} c√¢u h·ªèi ch·∫•t l∆∞·ª£ng cao!`, 'success');
    }

    cancelAIQuiz() {
        document.getElementById('ai-preview').style.display = 'none';
        document.getElementById('ai-quiz-name').value = '';
        this.quizManager.aiGeneratedQuiz = null;
    }
}

// Initialize AI Generator when QuizManager is ready
if (typeof QuizManager !== 'undefined') {
    QuizManager.prototype.loadAISettings = function() {
        if (!this.aiGenerator) {
            this.aiGenerator = new AIQuizGenerator(this);
            console.log('‚úÖ AI Quiz Generator ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o');
        }
    };
}
