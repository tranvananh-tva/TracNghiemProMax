// Explore Quiz Manager - Qu·∫£n l√Ω t√≠nh nƒÉng kh√°m ph√° ƒë·ªÅ thi
class ExploreQuizManager {
    constructor() {
        // T·ª± ƒë·ªông ph√°t hi·ªán server URL
        this.API_BASE_URL = this.detectServerURL();
        this.sharedQuizzes = [];
        this.currentUserName = localStorage.getItem('userName') || '';
        this.currentSharingQuizId = null;
        this.isServerOnline = false;
        this.offlineMode = false;
        this.retryCount = 0;
        this.maxRetries = 3;
        this.serverInfo = null;
    }

    // Ph√°t hi·ªán URL server t·ª± ƒë·ªông
    detectServerURL() {
        // L·∫•y t·ª´ localStorage n·∫øu ƒë√£ l∆∞u
        const savedServerURL = localStorage.getItem('serverURL');
        if (savedServerURL) {
            console.log('üìå Using saved server URL:', savedServerURL);
            return savedServerURL;
        }

        // N·∫øu ƒëang ch·∫°y t·ª´ server (kh√¥ng ph·∫£i file://)
        if (window.location.protocol !== 'file:') {
            const baseURL = `${window.location.protocol}//${window.location.hostname}:3000/api`;
            console.log('üåê Detected server URL from location:', baseURL);
            return baseURL;
        }

        // M·∫∑c ƒë·ªãnh localhost
        console.log('üè† Using default localhost URL');
        return 'http://localhost:3000/api';
    }

    // L∆∞u server URL
    saveServerURL(url) {
        this.API_BASE_URL = url;
        localStorage.setItem('serverURL', url);
        console.log('‚úÖ ƒê√£ l∆∞u Server URL:', url);
    }

    // Cho ph√©p ng∆∞·ªùi d√πng thay ƒë·ªïi server URL
    showServerURLDialog() {
        const currentURL = this.API_BASE_URL.replace('/api', '');
        
        const dialog = document.createElement('div');
        dialog.className = 'server-url-dialog';
        dialog.innerHTML = `
            <div class="server-url-content">
                <div class="server-url-header">
                    <h3><i class="fas fa-server"></i> C·∫•u H√¨nh Server</h3>
                    <button class="btn-close" onclick="this.closest('.server-url-dialog').remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="server-url-body">
                    <p><strong>ƒê·ªãa ch·ªâ Server hi·ªán t·∫°i:</strong></p>
                    <input type="text" id="server-url-input" value="${currentURL}" 
                           placeholder="http://192.168.1.100:3000" class="server-url-input">
                    
                    <div class="server-url-help">
                        <h4><i class="fas fa-info-circle"></i> H∆∞·ªõng d·∫´n:</h4>
                        <ul>
                            <li><strong>Tr√™n m√°y ch·ªß:</strong> http://localhost:3000</li>
                            <li><strong>T·ª´ m√°y kh√°c (LAN):</strong> http://[IP-m√°y-ch·ªß]:3000</li>
                            <li><strong>V√≠ d·ª•:</strong> http://192.168.1.100:3000</li>
                        </ul>
                        
                        <div class="server-url-note">
                            <i class="fas fa-lightbulb"></i>
                            <p>ƒê·ªÉ xem IP c·ªßa m√°y ch·ªß, ch·∫°y server v√† xem console</p>
                        </div>
                    </div>

                    <div id="server-test-result"></div>
                </div>
                <div class="server-url-footer">
                    <button class="btn btn-primary" onclick="exploreQuizManager.testAndSaveServerURL()">
                        <i class="fas fa-check"></i> Ki·ªÉm Tra & L∆∞u
                    </button>
                    <button class="btn btn-secondary" onclick="exploreQuizManager.autoDetectServer()">
                        <i class="fas fa-search"></i> T·ª± ƒê·ªông T√¨m
                    </button>
                    <button class="btn btn-danger" onclick="this.closest('.server-url-dialog').remove()">
                        <i class="fas fa-times"></i> H·ªßy
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(dialog);
    }

    // Test v√† l∆∞u server URL
    async testAndSaveServerURL() {
        const input = document.getElementById('server-url-input');
        const resultDiv = document.getElementById('server-test-result');
        
        if (!input || !resultDiv) return;

        let serverURL = input.value.trim();
        
        // Validate URL
        if (!serverURL) {
            resultDiv.innerHTML = '<div class="test-error"><i class="fas fa-exclamation-triangle"></i> Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ server</div>';
            return;
        }

        // Th√™m http:// n·∫øu ch∆∞a c√≥
        if (!serverURL.startsWith('http://') && !serverURL.startsWith('https://')) {
            serverURL = 'http://' + serverURL;
        }

        // Lo·∫°i b·ªè /api n·∫øu c√≥
        serverURL = serverURL.replace(/\/api\/?$/, '');

        resultDiv.innerHTML = '<div class="test-loading"><i class="fas fa-spinner fa-spin"></i> ƒêang ki·ªÉm tra k·∫øt n·ªëi...</div>';

        try {
            const testURL = `${serverURL}/api/server-info`;
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000);

            const response = await fetch(testURL, { signal: controller.signal });
            clearTimeout(timeoutId);

            if (response.ok) {
                const data = await response.json();
                
                resultDiv.innerHTML = `
                    <div class="test-success">
                        <i class="fas fa-check-circle"></i> 
                        <strong>K·∫øt n·ªëi th√†nh c√¥ng!</strong>
                        <div class="server-info-details">
                            <p>Port: ${data.port}</p>
                            ${data.ipAddresses && data.ipAddresses.length > 0 ? 
                                `<p>IP: ${data.ipAddresses.join(', ')}</p>` : ''}
                        </div>
                    </div>
                `;

                // L∆∞u URL
                this.saveServerURL(`${serverURL}/api`);
                this.serverInfo = data;
                this.isServerOnline = true;
                this.updateServerStatus(true);

                // ƒê√≥ng dialog sau 2 gi√¢y
                setTimeout(() => {
                    document.querySelector('.server-url-dialog')?.remove();
                    quizManager.showToast('‚úÖ ƒê√£ k·∫øt n·ªëi server th√†nh c√¥ng!', 'success');
                    this.loadSharedQuizzes();
                }, 2000);
            } else {
                throw new Error('Server kh√¥ng ph·∫£n h·ªìi ƒë√∫ng');
            }
        } catch (error) {
            resultDiv.innerHTML = `
                <div class="test-error">
                    <i class="fas fa-times-circle"></i> 
                    <strong>Kh√¥ng th·ªÉ k·∫øt n·ªëi!</strong>
                    <p>${error.message}</p>
                    <p>Vui l√≤ng ki·ªÉm tra:</p>
                    <ul>
                        <li>Server ƒë√£ ch·∫°y ch∆∞a?</li>
                        <li>ƒê·ªãa ch·ªâ IP c√≥ ƒë√∫ng kh√¥ng?</li>
                        <li>T∆∞·ªùng l·ª≠a c√≥ ch·∫∑n kh√¥ng?</li>
                    </ul>
                </div>
            `;
        }
    }

    // T·ª± ƒë·ªông t√¨m server trong m·∫°ng LAN
    async autoDetectServer() {
        const resultDiv = document.getElementById('server-test-result');
        if (!resultDiv) return;

        resultDiv.innerHTML = '<div class="test-loading"><i class="fas fa-spinner fa-spin"></i> ƒêang t√¨m ki·∫øm server trong m·∫°ng...</div>';

        // L·∫•y IP hi·ªán t·∫°i c·ªßa m√°y
        const currentIP = await this.getCurrentIP();
        if (!currentIP) {
            resultDiv.innerHTML = '<div class="test-error"><i class="fas fa-times-circle"></i> Kh√¥ng th·ªÉ x√°c ƒë·ªãnh IP c·ªßa m√°y</div>';
            return;
        }

        // T·∫°o danh s√°ch IP ƒë·ªÉ test (c√πng subnet)
        const ipParts = currentIP.split('.');
        const subnet = `${ipParts[0]}.${ipParts[1]}.${ipParts[2]}`;
        
        const testIPs = [
            'localhost',
            '127.0.0.1',
            currentIP
        ];

        // Th√™m m·ªôt s·ªë IP ph·ªï bi·∫øn trong subnet
        for (let i = 1; i <= 10; i++) {
            testIPs.push(`${subnet}.${i}`);
        }

        resultDiv.innerHTML = `<div class="test-loading"><i class="fas fa-spinner fa-spin"></i> ƒêang ki·ªÉm tra ${testIPs.length} ƒë·ªãa ch·ªâ...</div>`;

        // Test t·ª´ng IP
        for (const ip of testIPs) {
            try {
                const testURL = `http://${ip}:3000/api/server-info`;
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 2000);

                const response = await fetch(testURL, { signal: controller.signal });
                clearTimeout(timeoutId);

                if (response.ok) {
                    const data = await response.json();
                    
                    resultDiv.innerHTML = `
                        <div class="test-success">
                            <i class="fas fa-check-circle"></i> 
                            <strong>T√¨m th·∫•y server t·∫°i: ${ip}</strong>
                        </div>
                    `;

                    // C·∫≠p nh·∫≠t input
                    const input = document.getElementById('server-url-input');
                    if (input) {
                        input.value = `http://${ip}:3000`;
                    }

                    // L∆∞u v√† k·∫øt n·ªëi
                    this.saveServerURL(`http://${ip}:3000/api`);
                    this.serverInfo = data;
                    this.isServerOnline = true;
                    this.updateServerStatus(true);

                    setTimeout(() => {
                        document.querySelector('.server-url-dialog')?.remove();
                        quizManager.showToast('‚úÖ ƒê√£ t√¨m th·∫•y v√† k·∫øt n·ªëi server!', 'success');
                        this.loadSharedQuizzes();
                    }, 2000);

                    return;
                }
            } catch (error) {
                // Ti·∫øp t·ª•c test IP ti·∫øp theo
                continue;
            }
        }

        resultDiv.innerHTML = `
            <div class="test-error">
                <i class="fas fa-times-circle"></i> 
                <strong>Kh√¥ng t√¨m th·∫•y server n√†o</strong>
                <p>Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ th·ªß c√¥ng</p>
            </div>
        `;
    }

    // L·∫•y IP hi·ªán t·∫°i c·ªßa m√°y (∆∞·ªõc l∆∞·ª£ng)
    async getCurrentIP() {
        try {
            // S·ª≠ d·ª•ng WebRTC ƒë·ªÉ l·∫•y local IP
            return new Promise((resolve) => {
                const pc = new RTCPeerConnection({ iceServers: [] });
                pc.createDataChannel('');
                pc.createOffer().then(offer => pc.setLocalDescription(offer));
                
                pc.onicecandidate = (ice) => {
                    if (!ice || !ice.candidate || !ice.candidate.candidate) return;
                    
                    const ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3})/;
                    const match = ipRegex.exec(ice.candidate.candidate);
                    
                    if (match) {
                        resolve(match[1]);
                        pc.close();
                    }
                };

                setTimeout(() => resolve(null), 3000);
            });
        } catch (error) {
            return null;
        }
    }

    // Kh·ªüi t·∫°o
    async initialize() {
        this.setupUserName();
        
        // ƒê√°nh d·∫•u ƒë√£ c·∫•u h√¨nh ƒë·ªÉ kh√¥ng hi·ªán th√¥ng b√°o
        localStorage.setItem('hasConfiguredServer', 'true');
        
        // Ki·ªÉm tra Supabase tr∆∞·ªõc
        await this.checkSupabaseStatus();
        
        // N·∫øu Supabase kh√¥ng kh·∫£ d·ª•ng, ki·ªÉm tra Local Server
        if (!this.isSupabaseAvailable) {
            await this.checkServerStatus();
        }
        
        // Load quiz tr∆∞·ªõc
        await this.loadSharedQuizzes();
        
        // B·∫≠t Realtime/Polling sau khi load xong
        this.setupRealtimeUpdates();
        
        this.setupEventListeners();
        
        // Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o (optional)
        this.requestNotificationPermission();
    }

    // Thi·∫øt l·∫≠p c·∫≠p nh·∫≠t realtime
    setupRealtimeUpdates() {
        if (this.isSupabaseAvailable && window.supabaseQuizManager) {
            // B·∫≠t Realtime cho Supabase
            window.supabaseQuizManager.enableRealtime();

            // ƒêƒÉng k√Ω callback ƒë·ªÉ nh·∫≠n c·∫≠p nh·∫≠t
            window.supabaseQuizManager.onQuizUpdate((update) => {
                this.handleRealtimeUpdate(update);
            });

            console.log('‚úÖ Supabase Realtime enabled - Auto-update is active');
        } else if (this.isServerOnline) {
            // B·∫≠t Polling cho Local Server
            this.startServerPolling();
            console.log('‚úÖ Local Server Polling enabled - Auto-update every 5 seconds');
        } else {
            console.warn('‚ö†Ô∏è No realtime updates available (offline mode)');
        }
    }

    // B·∫Øt ƒë·∫ßu polling cho Local Server
    startServerPolling() {
        // D·ª´ng polling c≈© n·∫øu c√≥
        this.stopServerPolling();

        // L∆∞u timestamp c·ªßa quiz m·ªõi nh·∫•t
        if (this.sharedQuizzes.length > 0) {
            this.lastUpdateTime = new Date(this.sharedQuizzes[0].sharedAt).getTime();
        } else {
            this.lastUpdateTime = Date.now();
        }

        // Poll m·ªói 5 gi√¢y
        this.pollingInterval = setInterval(() => {
            this.checkForUpdates();
        }, 5000);

        console.log('üîÑ Started polling for updates every 5 seconds');
    }

    // D·ª´ng polling
    stopServerPolling() {
        if (this.pollingInterval) {
            clearInterval(this.pollingInterval);
            this.pollingInterval = null;
            console.log('‚èπÔ∏è Stopped polling');
        }
    }

    // Ki·ªÉm tra c·∫≠p nh·∫≠t m·ªõi t·ª´ server
    async checkForUpdates() {
        if (!this.isServerOnline) {
            return;
        }

        try {
            const response = await fetch(`${this.API_BASE_URL}/shared-quizzes`, {
                signal: AbortSignal.timeout(3000)
            });

            if (!response.ok) {
                return;
            }

            const data = await response.json();

            if (data.success && data.quizzes && data.quizzes.length > 0) {
                // Ki·ªÉm tra quiz m·ªõi
                const newQuizzes = data.quizzes.filter(quiz => {
                    const quizTime = new Date(quiz.sharedAt).getTime();
                    return quizTime > this.lastUpdateTime;
                });

                if (newQuizzes.length > 0) {
                    console.log(`üÜï Found ${newQuizzes.length} new quiz(zes)`);
                    
                    // C·∫≠p nh·∫≠t timestamp
                    this.lastUpdateTime = new Date(newQuizzes[0].sharedAt).getTime();

                    // Th√™m quiz m·ªõi v√†o ƒë·∫ßu danh s√°ch
                    newQuizzes.reverse().forEach(quiz => {
                        this.handleRealtimeUpdate({
                            type: 'INSERT',
                            quiz: quiz
                        });
                    });

                    // Hi·ªÉn th·ªã th√¥ng b√°o
                    this.showNewQuizNotification(newQuizzes.length);
                }

                // Ki·ªÉm tra c·∫≠p nh·∫≠t views/attempts
                this.checkStatsUpdates(data.quizzes);
            }
        } catch (error) {
            // Kh√¥ng log l·ªói ƒë·ªÉ tr√°nh spam console
            if (error.name !== 'AbortError' && error.name !== 'TimeoutError') {
                console.warn('Polling error:', error.message);
            }
        }
    }

    // Ki·ªÉm tra c·∫≠p nh·∫≠t stats (views, attempts)
    checkStatsUpdates(serverQuizzes) {
        serverQuizzes.forEach(serverQuiz => {
            const localQuiz = this.sharedQuizzes.find(q => q.id === serverQuiz.id);
            
            if (localQuiz) {
                // Ki·ªÉm tra xem c√≥ thay ƒë·ªïi kh√¥ng
                if (localQuiz.views !== serverQuiz.views || 
                    localQuiz.attempts !== serverQuiz.attempts) {
                    
                    // C·∫≠p nh·∫≠t stats
                    this.handleRealtimeUpdate({
                        type: 'UPDATE',
                        quiz: serverQuiz
                    });
                }
            }
        });
    }

    // Hi·ªÉn th·ªã th√¥ng b√°o quiz m·ªõi
    showNewQuizNotification(count) {
        const message = count === 1 
            ? 'üÜï C√≥ 1 b√†i thi m·ªõi!' 
            : `üÜï C√≥ ${count} b√†i thi m·ªõi!`;
        
        // Hi·ªÉn th·ªã toast
        if (window.quizManager && window.quizManager.showToast) {
            window.quizManager.showToast(message, 'info');
        }

        // Hi·ªÉn th·ªã badge tr√™n tab n·∫øu kh√¥ng ƒëang xem
        if (document.hidden) {
            this.showBrowserNotification(message);
        }
    }

    // Hi·ªÉn th·ªã th√¥ng b√°o tr√¨nh duy·ªát
    showBrowserNotification(message) {
        // Ki·ªÉm tra quy·ªÅn th√¥ng b√°o
        if ('Notification' in window && Notification.permission === 'granted') {
            new Notification('Tr·∫Øc Nghi·ªám Pro', {
                body: message,
                icon: 'logo/logo.png',
                badge: 'logo/logo.png'
            });
        }
    }

    // Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o
    async requestNotificationPermission() {
        if ('Notification' in window && Notification.permission === 'default') {
            const permission = await Notification.requestPermission();
            if (permission === 'granted') {
                console.log('‚úÖ Notification permission granted');
            }
        }
    }

    // X·ª≠ l√Ω c·∫≠p nh·∫≠t realtime
    handleRealtimeUpdate(update) {
        const { type, quiz } = update;

        if (type === 'INSERT') {
            // Quiz m·ªõi ƒë∆∞·ª£c th√™m
            this.handleNewQuizRealtime(quiz);
        } else if (type === 'UPDATE') {
            // Quiz ƒë∆∞·ª£c c·∫≠p nh·∫≠t (views, attempts, likes)
            this.handleQuizUpdateRealtime(quiz);
        } else if (type === 'DELETE') {
            // Quiz b·ªã x√≥a
            this.handleQuizDeleteRealtime(quiz);
        }
    }

    // X·ª≠ l√Ω quiz m·ªõi (realtime)
    handleNewQuizRealtime(quiz) {
        // Th√™m v√†o ƒë·∫ßu danh s√°ch
        this.sharedQuizzes.unshift(quiz);

        // Render l·∫°i danh s√°ch
        this.renderSharedQuizzes(this.sharedQuizzes);

        // Hi·ªáu ·ª©ng highlight cho quiz m·ªõi
        setTimeout(() => {
            const quizCard = document.querySelector(`[data-quiz-id="${quiz.id}"]`);
            if (quizCard) {
                quizCard.classList.add('quiz-new-highlight');
                setTimeout(() => {
                    quizCard.classList.remove('quiz-new-highlight');
                }, 3000);
            }
        }, 100);
    }

    // X·ª≠ l√Ω c·∫≠p nh·∫≠t quiz (realtime)
    handleQuizUpdateRealtime(quiz) {
        // T√¨m quiz trong danh s√°ch
        const index = this.sharedQuizzes.findIndex(q => q.id === quiz.id);
        
        if (index !== -1) {
            // C·∫≠p nh·∫≠t d·ªØ li·ªáu
            this.sharedQuizzes[index] = {
                ...this.sharedQuizzes[index],
                views: quiz.views,
                attempts: quiz.attempts,
                likes: quiz.likes
            };

            // C·∫≠p nh·∫≠t UI cho quiz card n√†y
            this.updateQuizCardStats(quiz.id, quiz);
        }
    }

    // X·ª≠ l√Ω x√≥a quiz (realtime)
    handleQuizDeleteRealtime(quiz) {
        // X√≥a kh·ªèi danh s√°ch
        this.sharedQuizzes = this.sharedQuizzes.filter(q => q.id !== quiz.id);

        // Render l·∫°i
        this.renderSharedQuizzes(this.sharedQuizzes);
    }

    // C·∫≠p nh·∫≠t stats c·ªßa quiz card
    updateQuizCardStats(quizId, quiz) {
        const quizCard = document.querySelector(`[data-quiz-id="${quizId}"]`);
        
        if (!quizCard) return;

        // C·∫≠p nh·∫≠t views
        const viewsElement = quizCard.querySelector('.stat-item:nth-child(2) span');
        if (viewsElement) {
            const oldViews = parseInt(viewsElement.textContent);
            const newViews = quiz.views || 0;
            
            if (newViews > oldViews) {
                viewsElement.textContent = `${newViews} l∆∞·ª£t xem`;
                this.animateStatChange(viewsElement);
            }
        }

        // C·∫≠p nh·∫≠t attempts
        const attemptsElement = quizCard.querySelector('.stat-item:nth-child(3) span');
        if (attemptsElement) {
            const oldAttempts = parseInt(attemptsElement.textContent);
            const newAttempts = quiz.attempts || 0;
            
            if (newAttempts > oldAttempts) {
                attemptsElement.textContent = `${newAttempts} l∆∞·ª£t l√†m`;
                this.animateStatChange(attemptsElement);
            }
        }
    }

    // Hi·ªáu ·ª©ng khi stat thay ƒë·ªïi
    animateStatChange(element) {
        element.classList.add('stat-updated');
        setTimeout(() => {
            element.classList.remove('stat-updated');
        }, 1000);
    }

    // Ki·ªÉm tra Supabase c√≥ s·∫µn s√†ng kh√¥ng
    async checkSupabaseStatus() {
        try {
            // ƒêÔøΩÔøΩÔøΩi Supabase module load
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            if (window.supabaseQuizManager && window.supabaseQuizManager.isAvailable()) {
                this.isSupabaseAvailable = true;
                console.log('‚úÖ Supabase is available');
                return true;
            }
        } catch (error) {
            console.warn('Supabase not available:', error);
        }
        
        this.isSupabaseAvailable = false;
        return false;
    }

    // Ki·ªÉm tra tr·∫°ng th√°i server
    async checkServerStatus() {
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 gi√¢y timeout

            const response = await fetch(`${this.API_BASE_URL}/shared-quizzes`, {
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (response.ok) {
                this.isServerOnline = true;
                this.offlineMode = false;
                this.updateServerStatus(true);
                return true;
            }
        } catch (error) {
            console.warn('Server offline:', error.message);
            this.isServerOnline = false;
            this.offlineMode = true;
            this.updateServerStatus(false);
        }
        return false;
    }

    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã tr·∫°ng th√°i server
    updateServerStatus(isOnline) {
        const statusIndicator = document.getElementById('server-status-indicator');
        if (statusIndicator) {
            if (isOnline) {
                statusIndicator.innerHTML = `
                    <i class="fas fa-circle" style="color: #48bb78;"></i>
                    <span>Server ƒëang ho·∫°t ƒë·ªông</span>
                `;
                statusIndicator.className = 'server-status online';
            } else {
                statusIndicator.innerHTML = `
                    <i class="fas fa-circle" style="color: #f56565;"></i>
                    <span>Ch·∫ø ƒë·ªô Offline</span>
                    <button class="btn-retry-server" onclick="exploreQuizManager.retryServerConnection()">
                        <i class="fas fa-sync"></i> Th·ª≠ l·∫°i
                    </button>
                `;
                statusIndicator.className = 'server-status offline';
            }
        }
    }

    // Th·ª≠ k·∫øt n·ªëi l·∫°i server
    async retryServerConnection() {
        quizManager.showToast('üîÑ ƒêang ki·ªÉm tra k·∫øt n·ªëi server...', 'info');
        const isOnline = await this.checkServerStatus();
        
        if (isOnline) {
            quizManager.showToast('‚úÖ ƒê√£ k·∫øt n·ªëi server th√†nh c√¥ng!', 'success');
            this.loadSharedQuizzes();
        } else {
            quizManager.showToast('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi server. Vui l√≤ng kh·ªüi ƒë·ªông server.', 'error');
            this.showServerInstructions();
        }
    }

    // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n thi·∫øt l·∫≠p l·∫ßn ƒë·∫ßu
    showFirstTimeSetupGuide() {
        const modal = document.createElement('div');
        modal.className = 'server-instructions-modal first-time-setup';
        modal.innerHTML = `
            <div class="server-instructions-content">
                <div class="server-instructions-header">
                    <h3><i class="fas fa-rocket"></i> Ch√†o M·ª´ng ƒê·∫øn V·ªõi T√≠nh NƒÉng Chia S·∫ª!</h3>
                    <button class="btn-close" onclick="exploreQuizManager.closeFirstTimeSetup()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="server-instructions-body">
                    <p><strong>ƒê·ªÉ chia s·∫ª v√† xem b√†i l√†m t·ª´ c·ªông ƒë·ªìng trong m·∫°ng LAN:</strong></p>
                    
                    <div class="setup-option recommended">
                        <div class="option-badge">‚ú® D·ªÖ D√†ng</div>
                        <h4><i class="fas fa-network-wired"></i> Local Server (Trong M·∫°ng LAN)</h4>
                        <p>Chia s·∫ª trong m·∫°ng n·ªôi b·ªô, t·ªëc ƒë·ªô cao</p>
                        <ul>
                            <li>‚úÖ T·ªëc ƒë·ªô nhanh</li>
                            <li>‚úÖ Kh√¥ng c·∫ßn Internet</li>
                            <li>‚úÖ Mi·ªÖn ph√≠ ho√†n to√†n</li>
                            <li>‚úÖ D·ªØ li·ªáu l∆∞u tr√™n m√°y b·∫°n</li>
                        </ul>
                        <button class="btn btn-primary" onclick="exploreQuizManager.showLocalServerSetupGuide()">
                            <i class="fas fa-book"></i> H∆∞·ªõng D·∫´n C√†i ƒê·∫∑t
                        </button>
                    </div>

                    <div class="instruction-note">
                        <i class="fas fa-info-circle"></i>
                        <p><strong>L∆∞u √Ω:</strong> C·∫£ m√°y ch·ªß v√† m√°y kh√°ch ph·∫£i c√πng m·∫°ng WiFi/LAN ƒë·ªÉ chia s·∫ª ƒë∆∞·ª£c.</p>
                    </div>
                </div>
                <div class="server-instructions-footer">
                    <button class="btn btn-success" onclick="exploreQuizManager.closeFirstTimeSetup()">
                        <i class="fas fa-check"></i> ƒê√£ Hi·ªÉu, B·∫Øt ƒê·∫ßu S·ª≠ D·ª•ng
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
    }

    // ƒê√≥ng h∆∞·ªõng d·∫´n l·∫ßn ƒëÔøΩÔøΩu
    closeFirstTimeSetup() {
        localStorage.setItem('hasConfiguredServer', 'true');
        document.querySelector('.first-time-setup')?.remove();
    }

    // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n Local Server
    showLocalServerSetupGuide() {
        const modal = document.createElement('div');
        modal.className = 'server-instructions-modal local-server-guide';
        modal.innerHTML = `
            <div class="server-instructions-content">
                <div class="server-instructions-header">
                    <h3><i class="fas fa-server"></i> H∆∞·ªõng D·∫´n C√†i ƒê·∫∑t Local Server</h3>
                    <button class="btn-close" onclick="this.closest('.local-server-guide').remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="server-instructions-body">
                    <div class="server-role-selection">
                        <h4>B·∫°n ƒëang ·ªü m√°y n√†o?</h4>
                        <div class="role-buttons">
                            <button class="btn btn-primary" onclick="exploreQuizManager.showServerHostGuide()">
                                <i class="fas fa-server"></i> M√°y Ch·ªß (Host)
                                <small>M√°y ch·∫°y server, chia s·∫ª b√†i</small>
                            </button>
                            <button class="btn btn-secondary" onclick="exploreQuizManager.showServerClientGuide()">
                                <i class="fas fa-laptop"></i> M√°y Kh√°ch (Client)
                                <small>M√°y xem b√†i t·ª´ m√°y kh√°c</small>
                            </button>
                        </div>
                    </div>

                    <div class="instruction-note">
                        <i class="fas fa-info-circle"></i>
                        <p><strong>L∆∞u √Ω:</strong> C·∫£ 2 m√°y ph·∫£i c√πng m·∫°ng WiFi/LAN</p>
                    </div>
                </div>
                <div class="server-instructions-footer">
                    <button class="btn btn-secondary" onclick="this.closest('.local-server-guide').remove()">
                        <i class="fas fa-times"></i> ƒê√≥ng
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
    }

    // H∆∞·ªõng d·∫´n cho m√°y ch·ªß (Host)
    showServerHostGuide() {
        document.querySelector('.local-server-guide')?.remove();
        
        const modal = document.createElement('div');
        modal.className = 'server-instructions-modal server-host-guide';
        modal.innerHTML = `
            <div class="server-instructions-content">
                <div class="server-instructions-header">
                    <h3><i class="fas fa-server"></i> H∆∞·ªõng D·∫´n Cho M√°y Ch·ªß</h3>
                    <button class="btn-close" onclick="this.closest('.server-host-guide').remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="server-instructions-body">
                    <div class="instruction-step">
                        <div class="step-number">1</div>
                        <div class="step-content">
                            <h4>Kh·ªüi ƒê·ªông Server</h4>
                            <p><strong>C√°ch 1:</strong> Double-click file <code>start-server.bat</code></p>
                            <p><strong>C√°ch 2:</strong> M·ªü Terminal v√† ch·∫°y:</p>
                            <code>npm run server</code>
                        </div>
                    </div>

                    <div class="instruction-step">
                        <div class="step-number">2</div>
                        <div class="step-content">
                            <h4>L·∫•y ƒê·ªãa Ch·ªâ IP</h4>
                            <p>Server s·∫Ω hi·ªÉn th·ªã IP trong console:</p>
                            <code>Network: http://192.168.1.100:3000</code>
                            <p>Ho·∫∑c ch·∫°y l·ªánh:</p>
                            <code>ipconfig</code> (Windows) ho·∫∑c <code>ifconfig</code> (Mac/Linux)
                        </div>
                    </div>

                    <div class="instruction-step">
                        <div class="step-number">3</div>
                        <div class="step-content">
                            <h4>C·∫•u H√¨nh Firewall</h4>
                            <p><strong>Windows:</strong> Ch·∫°y l·ªánh (Run as Administrator):</p>
                            <code>netsh advfirewall firewall add rule name="TracNghiemPro" dir=in action=allow protocol=TCP localport=3000</code>
                        </div>
                    </div>

                    <div class="instruction-step">
                        <div class="step-number">4</div>
                        <div class="step-content">
                            <h4>Chia S·∫ª IP Cho M√°y Kh√°c</h4>
                            <p>G·ª≠i ƒë·ªãa ch·ªâ IP cho ng∆∞·ªùi d√πng kh√°c:</p>
                            <code>http://192.168.1.100:3000</code>
                        </div>
                    </div>

                    <div class="instruction-note">
                        <i class="fas fa-book"></i>
                        <p>Xem h∆∞·ªõng d·∫´n chi ti·∫øt trong file: <code>HUONG_DAN_CHIA_SE_TU_MAY_KHAC.md</code></p>
                    </div>
                </div>
                <div class="server-instructions-footer">
                    <button class="btn btn-primary" onclick="exploreQuizManager.retryServerConnection(); this.closest('.server-host-guide').remove();">
                        <i class="fas fa-sync"></i> Ki·ªÉm Tra K·∫øt N·ªëi
                    </button>
                    <button class="btn btn-secondary" onclick="this.closest('.server-host-guide').remove()">
                        <i class="fas fa-times"></i> ƒê√≥ng
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
    }

    // H∆∞·ªõng d·∫´n cho m√°y kh√°ch (Client)
    showServerClientGuide() {
        document.querySelector('.local-server-guide')?.remove();
        
        const modal = document.createElement('div');
        modal.className = 'server-instructions-modal server-client-guide';
        modal.innerHTML = `
            <div class="server-instructions-content">
                <div class="server-instructions-header">
                    <h3><i class="fas fa-laptop"></i> H∆∞·ªõng D·∫´n Cho M√°y Kh√°ch</h3>
                    <button class="btn-close" onclick="this.closest('.server-client-guide').remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="server-instructions-body">
                    <div class="instruction-step">
                        <div class="step-number">1</div>
                        <div class="step-content">
                            <h4>L·∫•y ƒê·ªãa Ch·ªâ IP T·ª´ M√°y Ch·ªß</h4>
                            <p>H·ªèi ng∆∞·ªùi qu·∫£n l√Ω m√°y ch·ªß ƒë·ªÉ l·∫•y ƒë·ªãa ch·ªâ IP</p>
                            <p>V√≠ d·ª•: <code>http://192.168.1.100:3000</code></p>
                        </div>
                    </div>

                    <div class="instruction-step">
                        <div class="step-number">2</div>
                        <div class="step-content">
                            <h4>C·∫•u H√¨nh Server URL</h4>
                            <p>Click n√∫t b√™n d∆∞·ªõi ƒë·ªÉ m·ªü c·∫•u h√¨nh</p>
                        </div>
                    </div>

                    <div class="instruction-note">
                        <i class="fas fa-info-circle"></i>
                        <p><strong>L∆∞u √Ω:</strong> ƒê·∫£m b·∫£o m√°y c·ªßa b·∫°n c√πng m·∫°ng WiFi/LAN v·ªõi m√°y ch·ªß</p>
                    </div>
                </div>
                <div class="server-instructions-footer">
                    <button class="btn btn-primary" onclick="exploreQuizManager.showServerURLDialog(); this.closest('.server-client-guide').remove();">
                        <i class="fas fa-cog"></i> M·ªü C·∫•u H√¨nh Server
                    </button>
                    <button class="btn btn-secondary" onclick="exploreQuizManager.autoDetectServer(); this.closest('.server-client-guide').remove();">
                        <i class="fas fa-search"></i> T·ª± ƒê·ªông T√¨m Server
                    </button>
                    <button class="btn btn-danger" onclick="this.closest('.server-client-guide').remove()">
                        <i class="fas fa-times"></i> ƒê√≥ng
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
    }

    // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n kh·ªüi ƒë·ªông server (gi·ªØ l·∫°i cho t∆∞∆°ng th√≠ch)
    showServerInstructions() {
        this.showLocalServerSetupGuide();
    }

    // Thi·∫øt l·∫≠p t√™n ng∆∞·ªùi d√πng
    setupUserName() {
        const userNameInput = document.getElementById('user-name-input');
        if (userNameInput) {
            userNameInput.value = this.currentUserName;
            userNameInput.addEventListener('change', (e) => {
                this.currentUserName = e.target.value.trim();
                localStorage.setItem('userName', this.currentUserName);
            });
        }
    }

    // Thi·∫øt l·∫≠p event listeners
    setupEventListeners() {
        // N√∫t t√¨m ki·∫øm
        const searchBtn = document.getElementById('search-shared-quiz-btn');
        const searchInput = document.getElementById('search-shared-quiz');
        
        if (searchBtn && searchInput) {
            searchBtn.addEventListener('click', () => {
                this.searchSharedQuizzes(searchInput.value);
            });
            
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.searchSharedQuizzes(searchInput.value);
                }
            });
        }

        // N√∫t l√†m m·ªõi v·ªõi hi·ªáu ·ª©ng
        const refreshBtn = document.getElementById('refresh-shared-quizzes');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', async () => {
                // Th√™m class refreshing ƒë·ªÉ hi·ªáu ·ª©ng xoay
                refreshBtn.classList.add('refreshing');
                
                // Load quiz
                await this.loadSharedQuizzes();
                
                // X√≥a class sau khi load xong
                setTimeout(() => {
                    refreshBtn.classList.remove('refreshing');
                }, 500);
            });
        }
    }

    // T·∫£i danh s√°ch quiz ƒë∆∞·ª£c chia s·∫ª
    async loadSharedQuizzes() {
        try {
            this.showLoading(true);
            
            // ∆Øu ti√™n Supabase n·∫øu c√≥
            if (this.isSupabaseAvailable && window.supabaseQuizManager) {
                try {
                    const result = await window.supabaseQuizManager.getAllQuizzes(50);
                    if (result.success) {
                        this.sharedQuizzes = result.quizzes;
                        this.renderSharedQuizzes(this.sharedQuizzes);
                        quizManager.showToast('‚òÅÔ∏è ƒê√£ t·∫£i quiz t·ª´ Supabase', 'success');
                        return;
                    }
                } catch (error) {
                    console.warn('Supabase load failed, trying local server:', error);
                }
            }
            
            // Fallback sang Local server
            if (!this.isServerOnline) {
                await this.checkServerStatus();
            }

            if (!this.isServerOnline) {
                this.loadOfflineQuizzes();
                return;
            }

            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000);

            const response = await fetch(`${this.API_BASE_URL}/shared-quizzes`, {
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            const data = await response.json();
            
            if (data.success) {
                this.sharedQuizzes = data.quizzes;
                this.renderSharedQuizzes(this.sharedQuizzes);
                this.isServerOnline = true;
                this.updateServerStatus(true);
            } else {
                this.showError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·ªÅ thi');
            }
        } catch (error) {
            console.error('Error loading shared quizzes:', error);
            this.isServerOnline = false;
            this.updateServerStatus(false);
            this.loadOfflineQuizzes();
        } finally {
            this.showLoading(false);
        }
    }

    // Load quiz t·ª´ localStorage (ch·∫ø ƒë·ªô offline)
    loadOfflineQuizzes() {
        const offlineQuizzes = JSON.parse(localStorage.getItem('offlineSharedQuizzes')) || [];
        this.sharedQuizzes = offlineQuizzes;
        
        if (offlineQuizzes.length > 0) {
            this.renderSharedQuizzes(offlineQuizzes);
            quizManager.showToast('üì± ƒêang xem quiz ƒë√£ l∆∞u offline', 'info');
        } else {
            this.showOfflineEmptyState();
        }
    }

    // Hi·ªÉn th·ªã tr·∫°ng th√°i r·ªóng khi offline
    showOfflineEmptyState() {
        const container = document.getElementById('shared-quizzes-grid');
        if (container) {
            container.innerHTML = `
                <div class="offline-empty-state">
                    <i class="fas fa-wifi-slash"></i>
                    <h3>Ch·∫ø ƒë·ªô Offline</h3>
                    <p>Kh√¥ng c√≥ quiz n√†o ƒë∆∞·ª£c l∆∞u offline.</p>
                    <p>Vui l√≤ng kh·ªüi ƒë·ªông server ƒë·ªÉ xem quiz t·ª´ c·ªông ƒë·ªìng.</p>
                    <button class="btn btn-primary" onclick="exploreQuizManager.showServerInstructions()">
                        <i class="fas fa-question-circle"></i>
                        H∆∞·ªõng D·∫´n Kh·ªüi ƒê·ªông Server
                    </button>
                    <button class="btn btn-secondary" onclick="exploreQuizManager.retryServerConnection()">
                        <i class="fas fa-sync"></i>
                        Th·ª≠ K·∫øt N·ªëi L·∫°i
                    </button>
                </div>
            `;
        }
    }

    // T√¨m ki·∫øm quiz
    async searchSharedQuizzes(keyword) {
        if (!keyword || keyword.trim() === '') {
            this.loadSharedQuizzes();
            return;
        }

        try {
            this.showLoading(true);
            
            const response = await fetch(`${this.API_BASE_URL}/shared-quizzes/search/${encodeURIComponent(keyword)}`);
            const data = await response.json();
            
            if (data.success) {
                this.renderSharedQuizzes(data.quizzes);
                if (data.quizzes.length === 0) {
                    quizManager.showToast(`Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ cho "${keyword}"`, 'info');
                }
            }
        } catch (error) {
            console.error('Error searching quizzes:', error);
            this.showError('L·ªói khi t√¨m ki·∫øm');
        } finally {
            this.showLoading(false);
        }
    }

    // Hi·ªÉn th·ªã danh s√°ch quiz
    renderSharedQuizzes(quizzes) {
        const container = document.getElementById('shared-quizzes-grid');
        
        if (!container) return;

        if (quizzes.length === 0) {
            container.innerHTML = `
                <div class="empty-state-card">
                    <i class="fas fa-search"></i>
                    <h3>Ch∆∞a c√≥ ƒë·ªÅ thi n√†o ƒë∆∞·ª£c chia s·∫ª</h3>
                    <p>H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n chia s·∫ª ƒë·ªÅ thi c·ªßa b·∫°n!</p>
                </div>
            `;
            return;
        }

        const quizzesHTML = quizzes.map(quiz => {
            const timeAgo = this.getTimeAgo(quiz.sharedAt);
            const date = new Date(quiz.sharedAt).toLocaleDateString('vi-VN');
            
            return `
                <div class="shared-quiz-card" data-quiz-id="${quiz.id}">
                    <div class="shared-quiz-header">
                        <div class="shared-quiz-icon">
                            <i class="fas fa-file-alt"></i>
                        </div>
                        <div class="shared-quiz-badge">
                            <i class="fas fa-share-alt"></i>
                            Chia s·∫ª
                        </div>
                    </div>
                    
                    <div class="shared-quiz-content">
                        <h3 class="shared-quiz-title">${this.escapeHtml(quiz.title)}</h3>
                        <p class="shared-quiz-description">${this.escapeHtml(quiz.description)}</p>
                        
                        <div class="shared-quiz-meta">
                            <div class="meta-item">
                                <i class="fas fa-user"></i>
                                <span>${this.escapeHtml(quiz.userName)}</span>
                            </div>
                            <div class="meta-item">
                                <i class="fas fa-calendar"></i>
                                <span>${date}</span>
                            </div>
                            <div class="meta-item">
                                <i class="fas fa-clock"></i>
                                <span>${timeAgo}</span>
                            </div>
                        </div>
                        
                        <div class="shared-quiz-stats">
                            <div class="stat-item">
                                <i class="fas fa-question-circle"></i>
                                <span>${quiz.totalQuestions} c√¢u</span>
                            </div>
                            <div class="stat-item stat-views">
                                <i class="fas fa-eye"></i>
                                <span class="views-count" data-quiz-id="${quiz.id}">${quiz.views || 0} l∆∞·ª£t xem</span>
                            </div>
                            <div class="stat-item">
                                <i class="fas fa-pen"></i>
                                <span>${quiz.attempts || 0} l∆∞·ª£t l√†m</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="shared-quiz-actions">
                        <button class="btn-start-shared-quiz" onclick="exploreQuizManager.startSharedQuiz('${quiz.id}')">
                            <i class="fas fa-play"></i>
                            V√†o √în Thi
                        </button>
                        <button class="btn-view-details" onclick="exploreQuizManager.viewQuizDetails('${quiz.id}')">
                            <i class="fas fa-info-circle"></i>
                            Xem chi ti·∫øt b√†i
                        </button>
                        ${this.isQuizOwner(quiz) ? `
                            <button class="btn-edit-quiz" onclick="exploreQuizManager.showEditDeleteMenu('${quiz.id}', event)">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>
                        ` : ''}
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = quizzesHTML;
    }

    // Chia s·∫ª quiz - M·ªü modal
    shareQuiz(quizId) {
        const quiz = quizManager.quizzes.find(q => q.id === quizId);
        
        if (!quiz) {
            quizManager.showToast('Kh√¥ng t√¨m th·∫•y quiz!', 'error');
            return;
        }

        // L∆∞u quiz ID ƒë·ªÉ s·ª≠ d·ª•ng sau
        this.currentSharingQuizId = quizId;

        // ƒêi·ªÅn th√¥ng tin v√†o modal
        const userNameInput = document.getElementById('share-user-name');
        const titleInput = document.getElementById('share-quiz-title');
        const descriptionInput = document.getElementById('share-quiz-description');
        const countSpan = document.getElementById('share-quiz-count');
        const dateSpan = document.getElementById('share-quiz-date');
        const timeSpan = document.getElementById('share-quiz-time');

        // ƒêi·ªÅn t√™n ng∆∞·ªùi d√πng t·ª´ localStorage ho·∫∑c t·ª´ tab kh√°m ph√°
        if (userNameInput) {
            userNameInput.value = this.currentUserName || '';
        }

        // ƒêi·ªÅn t√™n quiz g·ªëc (ng∆∞·ªùi d√πng c√≥ th·ªÉ s·ª≠a)
        if (titleInput) {
            titleInput.value = quiz.title;
        }

        // ƒêi·ªÅn m√¥ t·∫£ g·ªëc (ng∆∞·ªùi d√πng c√≥ th·ªÉ s·ª≠a)
        if (descriptionInput) {
            descriptionInput.value = quiz.description || '';
        }

        // Hi·ªÉn th·ªã s·ªë c√¢u h·ªèi
        if (countSpan) {
            countSpan.textContent = quiz.totalQuestions;
        }

        // Hi·ªÉn th·ªã ng√†y hi·ªán t·∫°i
        const now = new Date();
        if (dateSpan) {
            dateSpan.textContent = now.toLocaleDateString('vi-VN');
        }

        // Hi·ªÉn th·ªã th·ªùi gian hi·ªán t·∫°i
        if (timeSpan) {
            timeSpan.textContent = now.toLocaleTimeString('vi-VN', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
        }

        // M·ªü modal
        const modal = document.getElementById('share-quiz-modal');
        if (modal) {
            modal.classList.add('active');
        }
    }

    // ƒê√≥ng modal chia s·∫ª
    closeShareModal() {
        const modal = document.getElementById('share-quiz-modal');
        if (modal) {
            modal.classList.remove('active');
        }
        this.currentSharingQuizId = null;
    }

    // X√°c nh·∫≠n chia s·∫ª quiz
    async confirmShareQuiz() {
        if (!this.currentSharingQuizId) {
            quizManager.showToast('L·ªói: Kh√¥ng t√¨m th·∫•y quiz!', 'error');
            return;
        }

        const quiz = quizManager.quizzes.find(q => q.id === this.currentSharingQuizId);
        if (!quiz) {
            quizManager.showToast('Kh√¥ng t√¨m th·∫•y quiz!', 'error');
            return;
        }

        // L·∫•y th√¥ng tin t·ª´ form
        const userName = document.getElementById('share-user-name').value.trim();
        const title = document.getElementById('share-quiz-title').value.trim();
        const description = document.getElementById('share-quiz-description').value.trim();

        // Validate
        if (!userName) {
            quizManager.showToast('Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n!', 'warning');
            document.getElementById('share-user-name').focus();
            return;
        }

        if (!title) {
            quizManager.showToast('Vui l√≤ng nh·∫≠p t√™n ƒë·ªÅ thi!', 'warning');
            document.getElementById('share-quiz-title').focus();
            return;
        }

        // L∆∞u t√™n ng∆∞·ªùi d√πng
        this.currentUserName = userName;
        localStorage.setItem('userName', userName);

        // C·∫≠p nh·∫≠t t√™n ng∆∞·ªùi d√πng trong tab kh√°m ph√° n·∫øu c√≥
        const userNameInputExplore = document.getElementById('user-name-input');
        if (userNameInputExplore) {
            userNameInputExplore.value = userName;
        }

        // T·∫°o quiz m·ªõi v·ªõi t√™n v√† m√¥ t·∫£ t√πy ch·ªânh (kh√¥ng thay ƒë·ªïi quiz g·ªëc)
        const sharedQuiz = {
            ...quiz,
            title: title,
            description: description || 'Kh√¥ng c√≥ m√¥ t·∫£'
        };

        // ∆Øu ti√™n Supabase n·∫øu c√≥
        if (this.isSupabaseAvailable && window.supabaseQuizManager) {
            quizManager.showToast('‚òÅÔ∏è ƒêang chia s·∫ª l√™n Supabase...', 'info');
            try {
                const result = await window.supabaseQuizManager.shareQuiz(sharedQuiz, userName);
                if (result.success) {
                    quizManager.showToast('‚ú® ƒê√£ chia s·∫ª l√™n Supabase th√†nh c√¥ng!', 'success');
                    this.closeShareModal();
                    this.switchToExploreTab();
                    await this.loadSharedQuizzes();
                    return;
                }
            } catch (error) {
                console.error('Supabase share failed:', error);
                quizManager.showToast('‚ö†Ô∏è L·ªói Supabase, th·ª≠ Local Server...', 'warning');
            }
        }

        // Fallback sang Local Server
        quizManager.showToast('üîÑ ƒêang ki·ªÉm tra Local Server...', 'info');
        const serverOnline = await this.checkServerStatus();

        if (!serverOnline) {
            // Ch·∫ø ƒë·ªô offline - l∆∞u local
            this.shareQuizOffline(sharedQuiz, userName);
            return;
        }

        // Th·ª≠ chia s·∫ª l√™n server v·ªõi retry
        await this.shareQuizOnline(sharedQuiz, userName);
    }

    // Chia s·∫ª quiz l√™n server (online mode)
    async shareQuizOnline(sharedQuiz, userName, retryAttempt = 0) {
        try {
            // S·ª≠ d·ª•ng Local server
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 10000);

            const response = await fetch(`${this.API_BASE_URL}/shared-quizzes`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    quiz: sharedQuiz,
                    userName: userName
                }),
                signal: controller.signal
            });

            clearTimeout(timeoutId);
            const data = await response.json();

            if (data.success) {
                quizManager.showToast('‚ú® Chia s·∫ª ƒë·ªÅ thi th√†nh c√¥ng!', 'success');
                this.saveToOfflineStorage(data.quiz);
                this.closeShareModal();
                this.switchToExploreTab();
                this.loadSharedQuizzes();
            } else {
                throw new Error(data.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
            }
        } catch (error) {
            console.error('Error sharing quiz:', error);
            
            if (retryAttempt < this.maxRetries) {
                quizManager.showToast(`‚ö†Ô∏è L·ªói k·∫øt n·ªëi. ƒêang th·ª≠ l·∫°i (${retryAttempt + 1}/${this.maxRetries})...`, 'warning');
                await new Promise(resolve => setTimeout(resolve, 2000));
                return this.shareQuizOnline(sharedQuiz, userName, retryAttempt + 1);
            }
            
            this.showShareErrorDialog(sharedQuiz, userName);
        }
    }

    // Hi·ªÉn th·ªã dialog l·ªói v·ªõi t√πy chÔøΩÔøΩÔøΩn
    showShareErrorDialog(sharedQuiz, userName) {
        const dialog = document.createElement('div');
        dialog.className = 'share-error-dialog';
        dialog.innerHTML = `
            <div class="share-error-content">
                <div class="share-error-header">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Kh√¥ng Th·ªÉ K·∫øt N·ªëi Server</h3>
                </div>
                <div class="share-error-body">
                    <p>Kh√¥ng th·ªÉ chia s·∫ª quiz l√™n server sau ${this.maxRetries} l·∫ßn th·ª≠.</p>
                    <p><strong>B·∫°n mu·ªën l√†m g√¨?</strong></p>
                    
                    <div class="error-options">
                        <button class="btn btn-primary" onclick="exploreQuizManager.shareQuizOfflineFromDialog('${JSON.stringify(sharedQuiz).replace(/'/g, "\\'")}', '${userName}')">
                            <i class="fas fa-save"></i>
                            L∆∞u Offline (Ch·ªâ tr√™n m√°y n√†y)
                        </button>
                        
                        <button class="btn btn-secondary" onclick="exploreQuizManager.showServerInstructions(); this.closest('.share-error-dialog').remove();">
                            <i class="fas fa-server"></i>
                            H∆∞·ªõng D·∫´n Kh·ªüi ƒê·ªông Server
                        </button>
                        
                        <button class="btn btn-danger" onclick="this.closest('.share-error-dialog').remove();">
                            <i class="fas fa-times"></i>
                            H·ªßy B·ªè
                        </button>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(dialog);
    }

    // Chia s·∫ª quiz offline
    shareQuizOffline(sharedQuiz, userName) {
        const offlineQuiz = {
            id: Date.now().toString(),
            originalId: sharedQuiz.id,
            title: sharedQuiz.title,
            description: sharedQuiz.description || 'Kh√¥ng c√≥ m√¥ t·∫£',
            questions: sharedQuiz.questions,
            totalQuestions: sharedQuiz.questions.length,
            userName: userName,
            sharedAt: new Date().toISOString(),
            views: 0,
            attempts: 0,
            isOffline: true
        };

        this.saveToOfflineStorage(offlineQuiz);
        
        quizManager.showToast('üíæ ƒê√£ l∆∞u quiz offline tr√™n m√°y n√†y!', 'success');
        
        // ƒê√≥ng modal
        this.closeShareModal();
        
        // Chuy·ªÉn sang tab kh√°m ph√°
        this.switchToExploreTab();
        
        // Load offline quizzes
        this.loadOfflineQuizzes();
    }

    // L∆∞u quiz v√†o offline storage
    saveToOfflineStorage(quiz) {
        const offlineQuizzes = JSON.parse(localStorage.getItem('offlineSharedQuizzes')) || [];
        
        // Ki·ªÉm tra tr√πng l·∫∑p
        const existingIndex = offlineQuizzes.findIndex(q => q.originalId === quiz.originalId);
        if (existingIndex >= 0) {
            offlineQuizzes[existingIndex] = quiz;
        } else {
            offlineQuizzes.push(quiz);
        }
        
        localStorage.setItem('offlineSharedQuizzes', JSON.stringify(offlineQuizzes));
    }

    // Chia s·∫ª offline t·ª´ dialog (helper function)
    shareQuizOfflineFromDialog(sharedQuizStr, userName) {
        try {
            const sharedQuiz = JSON.parse(sharedQuizStr);
            this.shareQuizOffline(sharedQuiz, userName);
            document.querySelector('.share-error-dialog')?.remove();
        } catch (error) {
            console.error('Error parsing quiz:', error);
            quizManager.showToast('L·ªói x·ª≠ l√Ω d·ªØ li·ªáu', 'error');
        }
    }

    // Xem chi ti·∫øt quiz
    async viewQuizDetails(quizId) {
        try {
            // TƒÉng l∆∞·ª£t xem khi ng∆∞·ªùi d√πng click v√†o xem chi ti·∫øt
            const newViewCount = await this.incrementViews(quizId);
            
            // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
            if (newViewCount !== null) {
                this.updateViewCountOnCard(quizId, newViewCount);
            }
            
            // Th·ª≠ Supabase tr∆∞·ªõc
            if (this.isSupabaseAvailable && window.supabaseQuizManager) {
                try {
                    const result = await window.supabaseQuizManager.getQuizById(quizId);
                    if (result.success) {
                        this.showQuizDetailsModal(result.quiz);
                        return;
                    }
                } catch (error) {
                    console.warn('Supabase view details failed, trying local server:', error);
                }
            }
            
            // Fallback sang Local server
            const response = await fetch(`${this.API_BASE_URL}/shared-quizzes/${quizId}`);
            const data = await response.json();

            if (data.success) {
                this.showQuizDetailsModal(data.quiz);
            } else {
                quizManager.showToast('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt quiz', 'error');
            }
        } catch (error) {
            console.error('Error loading quiz details:', error);
            
            // Th·ª≠ l·∫•y t·ª´ offline storage
            const offlineQuiz = this.getOfflineQuiz(quizId);
            if (offlineQuiz) {
                this.showQuizDetailsModal(offlineQuiz);
                quizManager.showToast('üì± ƒêang xem chi ti·∫øt offline', 'info');
            } else {
                quizManager.showToast('L·ªói khi t·∫£i chi ti·∫øt', 'error');
            }
        }
    }

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£t xem tr√™n card
    updateViewCountOnCard(quizId, newViewCount) {
        const viewsElement = document.querySelector(`.views-count[data-quiz-id="${quizId}"]`);
        if (viewsElement) {
            viewsElement.textContent = `${newViewCount} l∆∞·ª£t xem`;
            viewsElement.classList.add('stat-updated');
            setTimeout(() => {
                viewsElement.classList.remove('stat-updated');
            }, 1000);
        }
    }

    // TƒÉng l∆∞·ª£t xem
    async incrementViews(quizId) {
        try {
            // Ki·ªÉm tra xem ƒë√£ xem quiz n√†y ch∆∞a (trong session hi·ªán t·∫°i)
            const viewedQuizzes = JSON.parse(sessionStorage.getItem('viewedQuizzes') || '[]');
            
            if (viewedQuizzes.includes(quizId)) {
                // ƒê√£ xem r·ªìi, kh√¥ng tƒÉng n·ªØa trong session n√†y
                console.log('‚è≠Ô∏è Quiz already viewed in this session');
                return null;
            }
            
            // ƒê√°nh d·∫•u ƒë√£ xem trong session
            viewedQuizzes.push(quizId);
            sessionStorage.setItem('viewedQuizzes', JSON.stringify(viewedQuizzes));
            
            let newViews = 0;
            
            // Th·ª≠ Supabase tr∆∞·ªõc
            if (this.isSupabaseAvailable && window.supabaseQuizManager) {
                try {
                    const result = await window.supabaseQuizManager.incrementViews(quizId);
                    if (result && result.success) {
                        newViews = result.views || 0;
                        console.log('‚úÖ Increased views on Supabase:', newViews);
                        
                        // C·∫≠p nh·∫≠t trong danh s√°ch local
                        const quiz = this.sharedQuizzes.find(q => q.id === quizId);
                        if (quiz) {
                            quiz.views = newViews;
                        }
                        
                        return newViews;
                    }
                } catch (error) {
                    console.warn('Supabase increment views failed:', error);
                }
            }
            
            // Fallback sang Local server
            if (this.isServerOnline) {
                try {
                    const response = await fetch(`${this.API_BASE_URL}/shared-quizzes/${quizId}/view`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        newViews = data.views || 0;
                        console.log('‚úÖ Increased views on Local Server:', newViews);
                        
                        // C·∫≠p nh·∫≠t trong danh s√°ch local
                        const quiz = this.sharedQuizzes.find(q => q.id === quizId);
                        if (quiz) {
                            quiz.views = newViews;
                        }
                        
                        return newViews;
                    }
                } catch (error) {
                    console.warn('Local server increment views failed:', error);
                }
            }
            
            // N·∫øu c·∫£ 2 ƒë·ªÅu fail, c·∫≠p nh·∫≠t local
            const quiz = this.sharedQuizzes.find(q => q.id === quizId);
            if (quiz) {
                quiz.views = (quiz.views || 0) + 1;
                newViews = quiz.views;
                console.log('üì± Increased views locally:', newViews);
                return newViews;
            }
            
            return null;
        } catch (error) {
            console.error('Error incrementing views:', error);
            return null;
        }
    }

    // Hi·ªÉn th·ªã modal chi ti·∫øt v·ªõi xem tr∆∞·ªõc ƒë·∫ßy ƒë·ªß
    showQuizDetailsModal(quiz) {
        const modal = document.getElementById('quiz-details-modal');
        if (!modal) return;

        const modalContent = modal.querySelector('.quiz-details-content');
        const date = new Date(quiz.sharedAt).toLocaleString('vi-VN');
        
        // T√≠nh to√°n s·ªë l∆∞·ª£ng c√¢u h·ªèi ƒë·ªÉ xem tr∆∞·ªõc (t·ªëi ƒëa 5 c√¢u)
        const previewCount = Math.min(5, quiz.questions.length);

        modalContent.innerHTML = `
            <div class="quiz-details-header">
                <div class="quiz-details-title-section">
                    <h2>${this.escapeHtml(quiz.title)}</h2>
                    <p class="quiz-details-description">${this.escapeHtml(quiz.description)}</p>
                </div>
                <button class="btn-close-modal" onclick="exploreQuizManager.closeDetailsModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="quiz-details-info">
                <div class="info-row">
                    <span class="info-label"><i class="fas fa-user"></i> Ng∆∞·ªùi chia s·∫ª:</span>
                    <span class="info-value">${this.escapeHtml(quiz.userName)}</span>
                </div>
                <div class="info-row">
                    <span class="info-label"><i class="fas fa-calendar"></i> Ng√†y chia s·∫ª:</span>
                    <span class="info-value">${date}</span>
                </div>
                <div class="info-row">
                    <span class="info-label"><i class="fas fa-question-circle"></i> S·ªë c√¢u h·ªèi:</span>
                    <span class="info-value">${quiz.totalQuestions} c√¢u</span>
                </div>
                <div class="info-row">
                    <span class="info-label"><i class="fas fa-eye"></i> L∆∞·ª£t xem:</span>
                    <span class="info-value">${quiz.views || 0}</span>
                </div>
                <div class="info-row">
                    <span class="info-label"><i class="fas fa-pen"></i> L∆∞·ª£t l√†m b√†i:</span>
                    <span class="info-value">${quiz.attempts || 0}</span>
                </div>
            </div>

            <div class="quiz-preview-section">
                <div class="quiz-preview-header">
                    <h3><i class="fas fa-eye"></i> Xem Tr∆∞·ªõc C√¢u H·ªèi</h3>
                    <span class="preview-badge">${previewCount}/${quiz.totalQuestions} c√¢u</span>
                </div>
                
                <div class="quiz-preview-questions">
                    ${quiz.questions.slice(0, previewCount).map((q, index) => `
                        <div class="preview-question-item">
                            <div class="preview-question-header">
                                <div class="preview-question-number">
                                    <i class="fas fa-question"></i>
                                    <span>C√¢u ${index + 1}</span>
                                </div>
                                ${q.image ? '<span class="preview-has-image"><i class="fas fa-image"></i> C√≥ h√¨nh ·∫£nh</span>' : ''}
                            </div>
                            <div class="preview-question-text">${this.escapeHtml(q.question)}</div>
                            ${q.image ? `<div class="preview-question-image"><img src="${q.image}" alt="H√¨nh c√¢u h·ªèi" /></div>` : ''}
                            <div class="preview-options">
                                ${q.options.map((opt, optIndex) => {
                                    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p opt l√† object ho·∫∑c string
                                    const optionText = typeof opt === 'object' ? (opt.text || opt.option || JSON.stringify(opt)) : opt;
                                    return `
                                        <div class="preview-option">
                                            <span class="preview-option-label">${String.fromCharCode(65 + optIndex)}.</span>
                                            <span class="preview-option-text">${this.escapeHtml(optionText)}</span>
                                        </div>
                                    `;
                                }).join('')}
                            </div>
                        </div>
                    `).join('')}
                </div>
                
                ${quiz.totalQuestions > previewCount ? `
                    <div class="more-questions-notice">
                        <i class="fas fa-info-circle"></i>
                        <span>C√≤n <strong>${quiz.totalQuestions - previewCount} c√¢u h·ªèi</strong> n·ªØa. V√†o √¥n thi ƒë·ªÉ xem to√†n b·ªô!</span>
                    </div>
                ` : ''}
            </div>

            <div class="quiz-details-actions">
                <button class="btn-start-quiz-primary" onclick="exploreQuizManager.startSharedQuiz('${quiz.id}'); exploreQuizManager.closeDetailsModal();">
                    <i class="fas fa-play-circle"></i>
                    <span>V√†o √în Thi Ngay</span>
                </button>
                <button class="btn-close-quiz" onclick="exploreQuizManager.closeDetailsModal()">
                    <i class="fas fa-times-circle"></i>
                    <span>ƒê√≥ng</span>
                </button>
            </div>
        `;

        modal.classList.add('active');
    }

    // ƒê√≥ng modal chi ti·∫øt
    closeDetailsModal() {
        const modal = document.getElementById('quiz-details-modal');
        if (modal) {
            modal.classList.remove('active');
        }
    }

    // B·∫Øt ƒë·∫ßu l√†m b√†i t·ª´ quiz ƒë∆∞·ª£c chia s·∫ª
    async startSharedQuiz(quizId) {
        try {
            // Th·ª≠ Supabase tr∆∞·ªõc
            if (this.isSupabaseAvailable && window.supabaseQuizManager) {
                try {
                    const result = await window.supabaseQuizManager.getQuizById(quizId);
                    if (result.success) {
                        const quiz = result.quiz;
                        
                        // TƒÉng s·ªë l∆∞·ª£t l√†m b√†i
                        await window.supabaseQuizManager.incrementAttempts(quizId);
                        
                        this.saveToOfflineStorage(quiz);
                        quizManager.currentQuiz = {
                            id: quiz.id,
                            title: quiz.title,
                            description: quiz.description,
                            questions: quiz.questions,
                            totalQuestions: quiz.totalQuestions,
                            isShared: true,
                            sharedBy: quiz.userName
                        };
                        quizManager.currentAnswers = {};
                        quizManager.switchTab('quiz');
                        quizManager.renderQuiz();
                        quizManager.showToast('üöÄ B·∫Øt ƒë·∫ßu l√†m b√†i t·ª´ Supabase!', 'success');
                        return;
                    }
                } catch (error) {
                    console.warn('Supabase start quiz failed, trying local server:', error);
                }
            }
            
            // Fallback sang Local server
            if (!this.isServerOnline) {
                const isOnline = await this.checkServerStatus();
                if (!isOnline) {
                    const offlineQuiz = this.getOfflineQuiz(quizId);
                    if (offlineQuiz) {
                        this.startOfflineQuiz(offlineQuiz);
                        return;
                    }
                    quizManager.showToast('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi. Vui l√≤ng c·∫•u h√¨nh server URL.', 'error');
                    this.showServerURLDialog();
                    return;
                }
            }

            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 10000);

            const response = await fetch(`${this.API_BASE_URL}/shared-quizzes/${quizId}`, {
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            const data = await response.json();

            if (data.success) {
                const quiz = data.quiz;
                try {
                    await fetch(`${this.API_BASE_URL}/shared-quizzes/${quizId}/attempt`, {
                        method: 'POST'
                    });
                } catch (err) {
                    console.warn('Could not update attempt count:', err);
                }
                this.saveToOfflineStorage(quiz);
                quizManager.currentQuiz = {
                    id: quiz.id,
                    title: quiz.title,
                    description: quiz.description,
                    questions: quiz.questions,
                    totalQuestions: quiz.totalQuestions,
                    isShared: true,
                    sharedBy: quiz.userName
                };
                quizManager.currentAnswers = {};
                quizManager.switchTab('quiz');
                quizManager.renderQuiz();
                quizManager.showToast('üöÄ B·∫Øt ƒë·∫ßu l√†m b√†i!', 'success');
            } else {
                throw new Error(data.error || 'Kh√¥ng th·ªÉ t·∫£i quiz');
            }
        } catch (error) {
            console.error('Error starting shared quiz:', error);
            const offlineQuiz = this.getOfflineQuiz(quizId);
            if (offlineQuiz) {
                quizManager.showToast('‚ö†Ô∏è ƒêang d√πng b·∫£n offline', 'warning');
                this.startOfflineQuiz(offlineQuiz);
                return;
            }
            this.showStartQuizErrorDialog(quizId, error);
        }
    }

    // L·∫•y quiz t·ª´ offline storage
    getOfflineQuiz(quizId) {
        const offlineQuizzes = JSON.parse(localStorage.getItem('offlineSharedQuizzes')) || [];
        return offlineQuizzes.find(q => q.id === quizId);
    }

    // B·∫Øt ƒë·∫ßu quiz offline
    startOfflineQuiz(quiz) {
        quizManager.currentQuiz = {
            id: quiz.id,
            title: quiz.title,
            description: quiz.description,
            questions: quiz.questions,
            totalQuestions: quiz.totalQuestions,
            isShared: true,
            isOffline: true,
            sharedBy: quiz.userName
        };
        
        quizManager.currentAnswers = {};
        
        // Chuy·ªÉn sang tab l√†m b√†i v√† render quiz
        quizManager.switchTab('quiz');
        quizManager.renderQuiz();
        
        quizManager.showToast('üì± ƒêang l√†m b√†i offline', 'info');
    }

    // Hi·ªÉn th·ªã dialog l·ªói khi kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu quiz
    showStartQuizErrorDialog(quizId, error) {
        const dialog = document.createElement('div');
        dialog.className = 'share-error-dialog';
        dialog.innerHTML = `
            <div class="share-error-content">
                <div class="share-error-header">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Kh√¥ng Th·ªÉ T·∫£i Quiz</h3>
                </div>
                <div class="share-error-body">
                    <p><strong>L·ªói:</strong> ${error.message || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi server'}</p>
                    <p>Vui l√≤ng th·ª≠ m·ªôt trong c√°c c√°ch sau:</p>
                    
                    <div class="error-options">
                        <button class="btn btn-primary" onclick="exploreQuizManager.showServerURLDialog(); this.closest('.share-error-dialog').remove();">
                            <i class="fas fa-cog"></i>
                            C·∫•u H√¨nh Server
                        </button>
                        
                        <button class="btn btn-secondary" onclick="exploreQuizManager.retryStartQuiz('${quizId}'); this.closest('.share-error-dialog').remove();">
                            <i class="fas fa-sync"></i>
                            Th·ª≠ L·∫°i
                        </button>
                        
                        <button class="btn btn-danger" onclick="this.closest('.share-error-dialog').remove();">
                            <i class="fas fa-times"></i>
                            ƒê√≥ng
                        </button>
                    </div>

                    <div class="instruction-note" style="margin-top: 20px;">
                        <i class="fas fa-info-circle"></i>
                        <p><strong>G·ª£i √Ω:</strong> N·∫øu b·∫°n ƒëang truy c·∫≠p t·ª´ m√°y kh√°c, h√£y c·∫•u h√¨nh ƒë·ªãa ch·ªâ IP c·ªßa server. V√≠ d·ª•: http://192.168.1.100:3000</p>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(dialog);
    }

    // Th·ª≠ l·∫°i b·∫Øt ƒë·∫ßu quiz
    async retryStartQuiz(quizId) {
        await this.checkServerStatus();
        await this.startSharedQuiz(quizId);
    }

    // Chuy·ªÉn sang tab kh√°m ph√°
    switchToExploreTab() {
        quizManager.switchTab('explore');
    }

    // Hi·ªÉn th·ªã loading
    showLoading(show) {
        const loader = document.getElementById('explore-loading');
        if (loader) {
            loader.style.display = show ? 'flex' : 'none';
        }
    }

    // Hi·ªÉn th·ªã l·ªói
    showError(message) {
        const container = document.getElementById('shared-quizzes-grid');
        if (container) {
            container.innerHTML = `
                <div class="error-state-card">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>C√≥ l·ªói x·∫£y ra</h3>
                    <p>${message}</p>
                    <button class="btn-primary" onclick="exploreQuizManager.loadSharedQuizzes()">
                        <i class="fas fa-sync"></i>
                        Th·ª≠ l·∫°i
                    </button>
                </div>
            `;
        }
    }

    // T√≠nh th·ªùi gian ƒë√£ tr√¥i qua
    getTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const seconds = Math.floor((now - date) / 1000);

        if (seconds < 60) return 'V·ª´a xong';
        if (seconds < 3600) return `${Math.floor(seconds / 60)} ph√∫t tr∆∞·ªõc`;
        if (seconds < 86400) return `${Math.floor(seconds / 3600)} gi·ªù tr∆∞·ªõc`;
        if (seconds < 604800) return `${Math.floor(seconds / 86400)} ng√†y tr∆∞·ªõc`;
        if (seconds < 2592000) return `${Math.floor(seconds / 604800)} tu·∫ßn tr∆∞·ªõc`;
        return `${Math.floor(seconds / 2592000)} th√°ng tr∆∞·ªõc`;
    }

    // Escape HTML ƒë·ªÉ tr√°nh XSS
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ ph·∫£i l√† ch·ªß s·ªü h·ªØu quiz kh√¥ng
    isQuizOwner(quiz) {
        // Ki·ªÉm tra theo userName
        if (this.currentUserName && quiz.userName) {
            return this.currentUserName.toLowerCase() === quiz.userName.toLowerCase();
        }
        
        // Ki·ªÉm tra theo originalId n·∫øu l√† quiz offline
        if (quiz.isOffline && quiz.originalId) {
            const localQuizzes = quizManager.quizzes || [];
            return localQuizzes.some(q => q.id === quiz.originalId);
        }
        
        return false;
    }

    // Hi·ªÉn th·ªã menu ch·ªânh s·ª≠a/x√≥a
    showEditDeleteMenu(quizId, event) {
        event.stopPropagation();
        
        // X√≥a menu c≈© n·∫øu c√≥
        const oldMenu = document.querySelector('.quiz-action-menu');
        if (oldMenu) {
            oldMenu.remove();
        }
        
        const menu = document.createElement('div');
        menu.className = 'quiz-action-menu';
        menu.innerHTML = `
            <button class="menu-item menu-edit" onclick="exploreQuizManager.editQuiz('${quizId}')">
                <i class="fas fa-edit"></i>
                <span>Ch·ªânh s·ª≠a</span>
            </button>
            <button class="menu-item menu-delete" onclick="exploreQuizManager.confirmDeleteQuiz('${quizId}')">
                <i class="fas fa-trash"></i>
                <span>X√≥a b√†i</span>
            </button>
        `;
        
        // ƒê·∫∑t v·ªã tr√≠ menu
        const button = event.target.closest('.btn-edit-quiz');
        const rect = button.getBoundingClientRect();
        menu.style.position = 'fixed';
        menu.style.top = `${rect.bottom + 5}px`;
        menu.style.right = `${window.innerWidth - rect.right}px`;
        
        document.body.appendChild(menu);
        
        // ƒê√≥ng menu khi click ra ngo√†i
        setTimeout(() => {
            document.addEventListener('click', function closeMenu(e) {
                if (!menu.contains(e.target)) {
                    menu.remove();
                    document.removeEventListener('click', closeMenu);
                }
            });
        }, 0);
    }

    // Ch·ªânh s·ª≠a quiz
    async editQuiz(quizId) {
        try {
            // ƒê√≥ng menu
            document.querySelector('.quiz-action-menu')?.remove();
            
            // L·∫•y th√¥ng tin quiz
            let quiz = this.sharedQuizzes.find(q => q.id === quizId);
            
            if (!quiz) {
                // Th·ª≠ l·∫•y t·ª´ server
                if (this.isSupabaseAvailable && window.supabaseQuizManager) {
                    const result = await window.supabaseQuizManager.getQuizById(quizId);
                    if (result.success) {
                        quiz = result.quiz;
                    }
                } else if (this.isServerOnline) {
                    const response = await fetch(`${this.API_BASE_URL}/shared-quizzes/${quizId}`);
                    const data = await response.json();
                    if (data.success) {
                        quiz = data.quiz;
                    }
                }
            }
            
            if (!quiz) {
                quizManager.showToast('Kh√¥ng t√¨m th·∫•y quiz!', 'error');
                return;
            }
            
            // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
            if (!this.isQuizOwner(quiz)) {
                quizManager.showToast('B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b√†i n√†y!', 'error');
                return;
            }
            
            // Hi·ªÉn th·ªã modal ch·ªânh s·ª≠a
            this.showEditQuizModal(quiz);
            
        } catch (error) {
            console.error('Error editing quiz:', error);
            quizManager.showToast('L·ªói khi t·∫£i th√¥ng tin quiz', 'error');
        }
    }

    // Hi·ªÉn th·ªã modal ch·ªânh s·ª≠a
    showEditQuizModal(quiz) {
        const modal = document.createElement('div');
        modal.className = 'edit-quiz-modal';
        modal.innerHTML = `
            <div class="edit-quiz-content">
                <div class="edit-quiz-header">
                    <h3><i class="fas fa-edit"></i> Ch·ªânh S·ª≠a B√†i Thi</h3>
                    <button class="btn-close" onclick="this.closest('.edit-quiz-modal').remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="edit-quiz-body">
                    <div class="form-group">
                        <label><i class="fas fa-heading"></i> T√™n b√†i thi:</label>
                        <input type="text" id="edit-quiz-title" value="${this.escapeHtml(quiz.title)}" class="form-input">
                    </div>
                    <div class="form-group">
                        <label><i class="fas fa-align-left"></i> M√¥ t·∫£:</label>
                        <textarea id="edit-quiz-description" class="form-textarea" rows="3">${this.escapeHtml(quiz.description || '')}</textarea>
                    </div>
                    <div class="quiz-info-summary">
                        <div class="info-item">
                            <i class="fas fa-question-circle"></i>
                            <span>${quiz.totalQuestions} c√¢u h·ªèi</span>
                        </div>
                        <div class="info-item">
                            <i class="fas fa-user"></i>
                            <span>Ng∆∞·ªùi t·∫°o: ${this.escapeHtml(quiz.userName)}</span>
                        </div>
                    </div>
                </div>
                <div class="edit-quiz-footer">
                    <button class="btn btn-primary" onclick="exploreQuizManager.saveEditedQuiz('${quiz.id}')">
                        <i class="fas fa-save"></i> L∆∞u thay ƒë·ªïi
                    </button>
                    <button class="btn btn-secondary" onclick="this.closest('.edit-quiz-modal').remove()">
                        <i class="fas fa-times"></i> H·ªßy
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
    }

    // L∆∞u quiz ƒë√£ ch·ªânh s·ª≠a
    async saveEditedQuiz(quizId) {
        try {
            const title = document.getElementById('edit-quiz-title').value.trim();
            const description = document.getElementById('edit-quiz-description').value.trim();
            
            if (!title) {
                quizManager.showToast('Vui l√≤ng nh·∫≠p t√™n b√†i thi!', 'warning');
                return;
            }
            
            quizManager.showToast('üîÑ ƒêang c·∫≠p nh·∫≠t...', 'info');
            
            // C·∫≠p nh·∫≠t tr√™n Supabase
            if (this.isSupabaseAvailable && window.supabaseQuizManager) {
                try {
                    const result = await window.supabaseQuizManager.updateQuiz(quizId, {
                        title: title,
                        description: description
                    });
                    
                    if (result.success) {
                        quizManager.showToast('‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!', 'success');
                        document.querySelector('.edit-quiz-modal')?.remove();
                        await this.loadSharedQuizzes();
                        return;
                    }
                } catch (error) {
                    console.warn('Supabase update failed:', error);
                }
            }
            
            // Fallback sang Local Server
            if (this.isServerOnline) {
                const response = await fetch(`${this.API_BASE_URL}/shared-quizzes/${quizId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        title: title,
                        description: description
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    quizManager.showToast('‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!', 'success');
                    document.querySelector('.edit-quiz-modal')?.remove();
                    await this.loadSharedQuizzes();
                    return;
                }
            }
            
            // C·∫≠p nh·∫≠t offline
            const offlineQuizzes = JSON.parse(localStorage.getItem('offlineSharedQuizzes')) || [];
            const index = offlineQuizzes.findIndex(q => q.id === quizId);
            
            if (index !== -1) {
                offlineQuizzes[index].title = title;
                offlineQuizzes[index].description = description;
                localStorage.setItem('offlineSharedQuizzes', JSON.stringify(offlineQuizzes));
                
                quizManager.showToast('‚úÖ ƒê√£ c·∫≠p nh·∫≠t offline!', 'success');
                document.querySelector('.edit-quiz-modal')?.remove();
                this.loadOfflineQuizzes();
            } else {
                quizManager.showToast('‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t!', 'error');
            }
            
        } catch (error) {
            console.error('Error saving edited quiz:', error);
            quizManager.showToast('‚ùå L·ªói khi l∆∞u thay ƒë·ªïi!', 'error');
        }
    }

    // X√°c nh·∫≠n x√≥a quiz
    confirmDeleteQuiz(quizId) {
        // ƒê√≥ng menu
        document.querySelector('.quiz-action-menu')?.remove();
        
        const quiz = this.sharedQuizzes.find(q => q.id === quizId);
        
        if (!quiz) {
            quizManager.showToast('Kh√¥ng t√¨m th·∫•y quiz!', 'error');
            return;
        }
        
        // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
        if (!this.isQuizOwner(quiz)) {
            quizManager.showToast('B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b√†i n√†y!', 'error');
            return;
        }
        
        const modal = document.createElement('div');
        modal.className = 'confirm-delete-modal';
        modal.innerHTML = `
            <div class="confirm-delete-content">
                <div class="confirm-delete-header">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>X√°c Nh·∫≠n X√≥a B√†i Thi</h3>
                </div>
                <div class="confirm-delete-body">
                    <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i thi n√†y?</p>
                    <div class="quiz-delete-info">
                        <strong>${this.escapeHtml(quiz.title)}</strong>
                        <span>${quiz.totalQuestions} c√¢u h·ªèi</span>
                    </div>
                    <p class="warning-text">
                        <i class="fas fa-info-circle"></i>
                        H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!
                    </p>
                </div>
                <div class="confirm-delete-footer">
                    <button class="btn btn-danger" onclick="exploreQuizManager.deleteQuiz('${quizId}')">
                        <i class="fas fa-trash"></i> X√≥a b√†i
                    </button>
                    <button class="btn btn-secondary" onclick="this.closest('.confirm-delete-modal').remove()">
                        <i class="fas fa-times"></i> H·ªßy
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
    }

    // X√≥a quiz
    async deleteQuiz(quizId) {
        try {
            quizManager.showToast('üîÑ ƒêang x√≥a...', 'info');
            
            // X√≥a tr√™n Supabase
            if (this.isSupabaseAvailable && window.supabaseQuizManager) {
                try {
                    const result = await window.supabaseQuizManager.deleteQuiz(quizId);
                    
                    if (result.success) {
                        quizManager.showToast('‚úÖ ƒê√£ x√≥a th√†nh c√¥ng!', 'success');
                        document.querySelector('.confirm-delete-modal')?.remove();
                        await this.loadSharedQuizzes();
                        return;
                    }
                } catch (error) {
                    console.warn('Supabase delete failed:', error);
                }
            }
            
            // Fallback sang Local Server
            if (this.isServerOnline) {
                const response = await fetch(`${this.API_BASE_URL}/shared-quizzes/${quizId}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    quizManager.showToast('‚úÖ ƒê√£ x√≥a th√†nh c√¥ng!', 'success');
                    document.querySelector('.confirm-delete-modal')?.remove();
                    await this.loadSharedQuizzes();
                    return;
                }
            }
            
            // X√≥a offline
            let offlineQuizzes = JSON.parse(localStorage.getItem('offlineSharedQuizzes')) || [];
            offlineQuizzes = offlineQuizzes.filter(q => q.id !== quizId);
            localStorage.setItem('offlineSharedQuizzes', JSON.stringify(offlineQuizzes));
            
            quizManager.showToast('‚úÖ ƒê√£ x√≥a offline!', 'success');
            document.querySelector('.confirm-delete-modal')?.remove();
            this.loadOfflineQuizzes();
            
        } catch (error) {
            console.error('Error deleting quiz:', error);
            quizManager.showToast('‚ùå L·ªói khi x√≥a b√†i thi!', 'error');
        }
    }
}

// Kh·ªüi t·∫°o explore quiz manager
let exploreQuizManager;
document.addEventListener('DOMContentLoaded', () => {
    try {
        exploreQuizManager = new ExploreQuizManager();
        
        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o DOM ƒë√£ s·∫µn s√†ng
        setTimeout(() => {
            if (exploreQuizManager) {
                exploreQuizManager.initialize();
                console.log('‚úÖ Explore Quiz Manager initialized successfully');
            }
        }, 500);
    } catch (error) {
        console.error('‚ùå Error initializing Explore Quiz Manager:', error);
    }
});

// Expose ƒë·ªÉ debug
window.exploreQuizManager = exploreQuizManager;
