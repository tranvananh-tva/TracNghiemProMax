// ============================================================================
// ROOM MANAGER - PHI√äN B·∫¢N B·∫¢O M·∫¨T HO√ÄN TO√ÄN
// ============================================================================
// ƒê·∫£m b·∫£o: Ng∆∞·ªùi d√πng CH·ªà th·∫•y ph√≤ng c·ªßa CH√çNH M√åNH
// Ph√≤ng ng∆∞·ªùi kh√°c CH·ªà truy c·∫≠p qua M√É 6 S·ªê
// ============================================================================

class RoomManager {
    constructor() {
        this.rooms = [];
        this.myRooms = []; // Ph√≤ng do t√¥i t·∫°o
        this.currentRoom = null;
        this.currentUserName = localStorage.getItem('roomUserName') || '';
        this.userRoomHistory = JSON.parse(localStorage.getItem('userRoomHistory') || '{}');
        this.isSupabaseAvailable = false;
        this.creatorId = this.getCreatorId(); // ID duy nh·∫•t cho ng∆∞·ªùi d√πng n√†y
        
        console.log('üîê Room Manager - SECURE MODE');
        console.log('üÜî Your Creator ID:', this.creatorId);
    }

    // T·∫°o ID duy nh·∫•t cho ng∆∞·ªùi t·∫°o ph√≤ng (browser fingerprint)
    getCreatorId() {
        let creatorId = localStorage.getItem('creatorId');
        if (!creatorId) {
            // T·∫°o ID duy nh·∫•t d·ª±a tr√™n th√¥ng tin browser
            creatorId = 'creator_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('creatorId', creatorId);
            console.log('üÜï Created new Creator ID:', creatorId);
        }
        return creatorId;
    }

    // Kh·ªüi t·∫°o
    async initialize() {
        console.log('üè† Initializing Room Manager (SECURE VERSION)...');
        
        // Ki·ªÉm tra Supabase
        await this.checkSupabaseStatus();
        
        // Load rooms
        await this.loadRooms();
        
        // Setup event listeners
        this.setupEventListeners();
        
        // Load quiz selector ngay
        this.loadQuizSelector();
        
        console.log('‚úÖ Room Manager initialized (SECURE)');
    }

    // Ki·ªÉm tra Supabase
    async checkSupabaseStatus() {
        try {
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            if (window.supabaseQuizManager && window.supabaseQuizManager.isAvailable()) {
                this.isSupabaseAvailable = true;
                console.log('‚úÖ Supabase available for rooms');
                return true;
            }
        } catch (error) {
            console.warn('Supabase not available for rooms:', error);
        }
        
        this.isSupabaseAvailable = false;
        return false;
    }

    // Setup event listeners
    setupEventListeners() {
        // N√∫t t·∫°o ph√≤ng
        const createBtn = document.getElementById('btn-create-room');
        if (createBtn) {
            createBtn.addEventListener('click', () => this.createRoom());
        }

        // N√∫t generate m√£ ph√≤ng
        const generateBtn = document.getElementById('btn-generate-room-code');
        if (generateBtn) {
            generateBtn.addEventListener('click', () => this.generateRoomCode());
        }

        // N√∫t nh·∫≠p ph√≤ng
        const joinBtn = document.getElementById('btn-join-room');
        if (joinBtn) {
            joinBtn.addEventListener('click', () => this.joinRoom());
        }

        // Enter key trong input m√£ ph√≤ng
        const roomCodeInput = document.getElementById('join-room-code-input');
        if (roomCodeInput) {
            roomCodeInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.joinRoom();
                }
            });
        }

        // N√∫t l√†m m·ªõi danh s√°ch ph√≤ng
        const refreshBtn = document.getElementById('refresh-my-rooms');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => this.loadRooms());
        }
    }

    // T·∫°o m√£ ph√≤ng ng·∫´u nhi√™n 6 s·ªë
    generateRoomCode() {
        const code = Math.floor(100000 + Math.random() * 900000).toString();
        const input = document.getElementById('room-code-input');
        if (input) {
            input.value = code;
        }
        
        this.showToast('üé≤ ƒê√£ t·∫°o m√£ ph√≤ng ng·∫´u nhi√™n', 'success');
    }

    // Show toast message
    showToast(message, type = 'success') {
        if (window.quizManager && window.quizManager.showToast) {
            window.quizManager.showToast(message, type);
            return;
        }

        const existingToast = document.querySelector('.toast');
        if (existingToast) {
            existingToast.remove();
        }

        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        
        const iconMap = {
            success: 'fa-check-circle',
            error: 'fa-exclamation-circle',
            warning: 'fa-exclamation-triangle',
            info: 'fa-info-circle'
        };
        
        toast.innerHTML = `
            <i class="fas ${iconMap[type]}"></i>
            <span>${message}</span>
        `;
        
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : type === 'warning' ? '#f59e0b' : '#3b82f6'};
            color: white;
            padding: 16px 24px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 10000;
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 15px;
            font-weight: 500;
            animation: slideIn 0.3s ease;
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    // T·∫°o ph√≤ng m·ªõi
    async createRoom() {
        try {
            const roomName = document.getElementById('room-name-input').value.trim();
            const roomCode = document.getElementById('room-code-input').value.trim();
            const roomDescription = document.getElementById('room-description-input').value.trim();
            const selectedQuizId = document.getElementById('room-quiz-selector').value;

            // Validate
            if (!roomName) {
                this.showToast('Vui l√≤ng nh·∫≠p t√™n ph√≤ng!', 'warning');
                document.getElementById('room-name-input').focus();
                return;
            }

            if (!roomCode || roomCode.length !== 6 || !/^\d{6}$/.test(roomCode)) {
                this.showToast('M√£ ph√≤ng ph·∫£i l√† 6 ch·ªØ s·ªë!', 'warning');
                document.getElementById('room-code-input').focus();
                return;
            }

            if (!selectedQuizId) {
                this.showToast('Vui l√≤ng ch·ªçn ƒë·ªÅ thi!', 'warning');
                document.getElementById('room-quiz-selector').focus();
                return;
            }

            // L·∫•y quiz
            let quiz = null;
            if (window.quizManager && window.quizManager.quizzes) {
                quiz = window.quizManager.quizzes.find(q => q.id === selectedQuizId);
            }
            
            if (!quiz) {
                try {
                    const storedQuizzes = localStorage.getItem('quizzes');
                    if (storedQuizzes) {
                        const quizzes = JSON.parse(storedQuizzes);
                        quiz = quizzes.find(q => q.id === selectedQuizId);
                    }
                } catch (error) {
                    console.error('Error loading quiz from localStorage:', error);
                }
            }
            
            if (!quiz) {
                this.showToast('Kh√¥ng t√¨m th·∫•y ƒë·ªÅ thi!', 'error');
                return;
            }

            // Ki·ªÉm tra m√£ ph√≤ng ƒë√£ t·ªìn t·∫°i ch∆∞a
            const existingRoom = await this.checkRoomCodeExists(roomCode);
            if (existingRoom) {
                this.showToast('M√£ ph√≤ng ƒë√£ t·ªìn t·∫°i! Vui l√≤ng ch·ªçn m√£ kh√°c.', 'error');
                return;
            }

            // T·∫°o room object
            const room = {
                id: Date.now().toString(),
                name: roomName,
                code: roomCode,
                description: roomDescription || 'Kh√¥ng c√≥ m√¥ t·∫£',
                quiz: {
                    id: quiz.id,
                    title: quiz.title,
                    description: quiz.description,
                    questions: quiz.questions,
                    totalQuestions: quiz.totalQuestions
                },
                creatorName: this.currentUserName || 'Ng∆∞·ªùi d√πng',
                creatorId: this.creatorId, // ‚≠ê QUAN TR·ªåNG
                createdAt: new Date().toISOString(),
                participants: 0,
                attempts: 0,
                leaderboard: []
            };

            this.showToast('üîÑ ƒêang t·∫°o ph√≤ng...', 'info');

            // ‚≠ê B·∫ÆT BU·ªòC PH·∫¢I C√ì SUPABASE
            if (!this.isSupabaseAvailable) {
                this.showToast('‚ùå Supabase ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh! Vui l√≤ng c·∫•u h√¨nh Supabase ƒë·ªÉ t·∫°o ph√≤ng.', 'error');
                return;
            }

            try {
                const result = await this.saveRoomToSupabase(room);
                if (result.success) {
                    room.id = result.id;
                    this.showToast('‚ú® T·∫°o ph√≤ng th√†nh c√¥ng! Ph√≤ng ƒë√£ ƒë∆∞·ª£c b·∫£o m·∫≠t.', 'success');
                    
                    this.clearRoomForm();
                    await this.loadRooms();
                    this.viewRoomDetails(room.id);
                    return;
                }
            } catch (error) {
                console.error('Supabase save failed:', error);
                this.showToast('‚ö†Ô∏è L·ªói Supabase: ' + error.message, 'error');
                return;
            }

        } catch (error) {
            console.error('Error creating room:', error);
            this.showToast('‚ùå L·ªói khi t·∫°o ph√≤ng: ' + error.message, 'error');
        }
    }

    // Ki·ªÉm tra m√£ ph√≤ng ƒë√£ t·ªìn t·∫°i ch∆∞a
    async checkRoomCodeExists(code) {
        if (!this.isSupabaseAvailable) {
            return false;
        }

        try {
            const { data, error } = await window.supabaseQuizManager.supabase
                .from('exam_rooms')
                .select('id')
                .eq('code', code)
                .single();

            if (data) {
                return true;
            }
        } catch (error) {
            // Kh√¥ng t√¨m th·∫•y l√† OK
        }

        return false;
    }

    // L∆∞u ph√≤ng l√™n Supabase
    async saveRoomToSupabase(room) {
        try {
            // Validate quiz data
            if (!room.quiz || !room.quiz.questions || room.quiz.questions.length === 0) {
                throw new Error('Quiz data kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu c√¢u h·ªèi!');
            }

            for (let i = 0; i < room.quiz.questions.length; i++) {
                const q = room.quiz.questions[i];
                if (!q.question || !q.options || q.options.length < 2 || !q.correctAnswer) {
                    throw new Error(`C√¢u h·ªèi ${i + 1} kh√¥ng ƒë·∫ßy ƒë·ªß th√¥ng tin!`);
                }
            }

            // ‚≠ê QUAN TR·ªåNG: ƒê·∫£m b·∫£o creator_id ƒë∆∞·ª£c l∆∞u
            if (!room.creatorId) {
                throw new Error('Creator ID kh√¥ng h·ª£p l·ªá!');
            }

            console.log('‚úÖ Quiz data verified');
            console.log('üîê Saving with creator_id:', room.creatorId);

            const { data, error } = await window.supabaseQuizManager.supabase
                .from('exam_rooms')
                .insert([{
                    name: room.name,
                    code: room.code,
                    description: room.description,
                    quiz_data: room.quiz,
                    creator_name: room.creatorName,
                    creator_id: room.creatorId, // ‚≠ê B·∫ÆT BU·ªòC
                    participants: 0,
                    attempts: 0,
                    leaderboard: []
                }])
                .select()
                .single();

            if (error) {
                throw error;
            }

            console.log('‚úÖ Room saved to Supabase securely');

            return {
                success: true,
                id: data.id
            };
        } catch (error) {
            console.error('Error saving room to Supabase:', error);
            throw error;
        }
    }

    // ‚≠ê‚≠ê‚≠ê LOAD PH√íNG - B·∫¢O M·∫¨T TUY·ªÜT ƒê·ªêI ‚≠ê‚≠ê‚≠ê
    async loadRooms() {
        try {
            this.showLoading(true);

            if (!this.isSupabaseAvailable) {
                this.showToast('‚ö†Ô∏è Supabase ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh.', 'warning');
                this.rooms = [];
                this.renderMyRooms();
                this.showLoading(false);
                return;
            }

            try {
                console.log('üîê Loading rooms with creator_id:', this.creatorId);
                
                // ‚≠ê‚≠ê‚≠ê QUAN TR·ªåNG NH·∫§T: CH·ªà LOAD PH√íNG C·ª¶A T√îI ‚≠ê‚≠ê‚≠ê
                const { data, error } = await window.supabaseQuizManager.supabase
                    .from('exam_rooms')
                    .select('*')
                    .eq('creator_id', this.creatorId) // ‚≠ê B·∫ÆT BU·ªòC - CH·ªà L·∫§Y PH√íNG C·ª¶A T√îI
                    .order('created_at', { ascending: false });

                if (error) {
                    throw error;
                }

                if (data) {
                    // ‚≠ê DOUBLE CHECK: L·ªçc l·∫°i m·ªôt l·∫ßn n·ªØa ·ªü client ƒë·ªÉ ch·∫Øc ch·∫Øn
                    this.myRooms = data
                        .filter(room => room.creator_id === this.creatorId) // ‚≠ê DOUBLE CHECK
                        .map(room => ({
                            id: room.id,
                            name: room.name,
                            code: room.code,
                            description: room.description,
                            quiz: room.quiz_data,
                            creatorName: room.creator_name,
                            creatorId: room.creator_id,
                            createdAt: room.created_at,
                            participants: room.participants || 0,
                            attempts: room.attempts || 0,
                            leaderboard: room.leaderboard || []
                        }));
                    
                    this.rooms = this.myRooms;

                    console.log(`‚úÖ Loaded ${this.myRooms.length} rooms (creator_id: ${this.creatorId})`);
                    console.log('üîí SECURITY: Other users\' rooms are COMPLETELY HIDDEN');

                    // ‚≠ê VERIFY: Ki·ªÉm tra kh√¥ng c√≥ ph√≤ng n√†o c·ªßa ng∆∞·ªùi kh√°c
                    const otherRooms = this.rooms.filter(r => r.creatorId !== this.creatorId);
                    if (otherRooms.length > 0) {
                        console.error('‚ö†Ô∏è SECURITY WARNING: Found rooms from other creators!', otherRooms);
                        // X√≥a ngay
                        this.rooms = this.rooms.filter(r => r.creatorId === this.creatorId);
                        this.myRooms = this.rooms;
                    }

                    this.renderMyRooms();
                    this.showLoading(false);
                    return;
                }
            } catch (error) {
                console.error('Supabase load failed:', error);
                this.showToast('‚ùå L·ªói khi t·∫£i ph√≤ng t·ª´ Supabase', 'error');
            }

            this.rooms = [];
            this.renderMyRooms();

        } catch (error) {
            console.error('Error loading rooms:', error);
            this.showToast('‚ùå L·ªói khi t·∫£i danh s√°ch ph√≤ng', 'error');
        } finally {
            this.showLoading(false);
        }
    }

    // Hi·ªÉn th·ªã danh s√°ch ph√≤ng c·ªßa t√¥i
    renderMyRooms() {
        const container = document.getElementById('my-rooms-grid');
        if (!container) return;

        if (this.rooms.length === 0) {
            container.innerHTML = `
                <div class="rooms-empty-state">
                    <i class="fas fa-door-open"></i>
                    <h3>Ch∆∞a c√≥ ph√≤ng thi n√†o</h3>
                    <p>H√£y t·∫°o ph√≤ng thi ƒë·∫ßu ti√™n c·ªßa b·∫°n!</p>
                    ${!this.isSupabaseAvailable ? '<p style="color: #f59e0b; margin-top: 10px;"><i class="fas fa-exclamation-triangle"></i> Supabase ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh</p>' : ''}
                    <p style="color: #6b7280; margin-top: 10px; font-size: 14px;">
                        <i class="fas fa-lock"></i> Ch·ªâ b·∫°n m·ªõi th·∫•y ph√≤ng c·ªßa m√¨nh
                    </p>
                </div>
            `;
            return;
        }

        const roomsHTML = this.rooms.map(room => `
            <div class="room-card" data-room-id="${room.id}">
                <div class="room-card-header">
                    <div>
                        <h4 class="room-card-title">${this.escapeHtml(room.name)}</h4>
                        <span class="room-code-badge">
                            <i class="fas fa-key"></i> ${room.code}
                        </span>
                    </div>
                </div>
                
                <p class="room-card-description">${this.escapeHtml(room.description)}</p>
                
                <div class="room-card-meta">
                    <div class="room-meta-item">
                        <i class="fas fa-book"></i>
                        <span>${this.escapeHtml(room.quiz.title)}</span>
                    </div>
                    <div class="room-meta-item">
                        <i class="fas fa-question-circle"></i>
                        <span>${room.quiz.totalQuestions} c√¢u h·ªèi</span>
                    </div>
                    <div class="room-meta-item">
                        <i class="fas fa-calendar"></i>
                        <span>${new Date(room.createdAt).toLocaleDateString('vi-VN')}</span>
                    </div>
                </div>
                
                <div class="room-card-stats">
                    <div class="room-stat-item">
                        <span class="room-stat-value">${room.participants || 0}</span>
                        <span class="room-stat-label">Ng∆∞·ªùi tham gia</span>
                    </div>
                    <div class="room-stat-item">
                        <span class="room-stat-value">${room.attempts || 0}</span>
                        <span class="room-stat-label">L∆∞·ª£t l√†m</span>
                    </div>
                    <div class="room-stat-item">
                        <span class="room-stat-value">${(room.leaderboard || []).length}</span>
                        <span class="room-stat-label">B·∫£ng x·∫øp h·∫°ng</span>
                    </div>
                </div>
                
                <div class="room-card-actions">
                    <button class="btn-view-room" onclick="roomManager.viewRoomDetails('${room.id}')">
                        <i class="fas fa-eye"></i>
                        Xem chi ti·∫øt
                    </button>
                    <button class="btn-share-room" onclick="roomManager.shareRoomCode('${room.code}')">
                        <i class="fas fa-share-alt"></i>
                        Chia s·∫ª
                    </button>
                    <button class="btn-delete-room" onclick="roomManager.deleteRoom('${room.id}')">
                        <i class="fas fa-trash"></i>
                        X√≥a
                    </button>
                </div>
            </div>
        `).join('');

        container.innerHTML = roomsHTML;
    }

    // Xem chi ti·∫øt ph√≤ng
    async viewRoomDetails(roomId) {
        try {
            // T√¨m trong myRooms
            let room = this.myRooms.find(r => r.id === roomId);

            // N·∫øu kh√¥ng t√¨m th·∫•y, load t·ª´ Supabase (c√≥ th·ªÉ l√† ph√≤ng join b·∫±ng m√£)
            if (!room && this.isSupabaseAvailable) {
                const { data, error } = await window.supabaseQuizManager.supabase
                    .from('exam_rooms')
                    .select('*')
                    .eq('id', roomId)
                    .single();

                if (!error && data) {
                    room = {
                        id: data.id,
                        name: data.name,
                        code: data.code,
                        description: data.description,
                        quiz: data.quiz_data,
                        creatorName: data.creator_name,
                        creatorId: data.creator_id,
                        createdAt: data.created_at,
                        participants: data.participants || 0,
                        attempts: data.attempts || 0,
                        leaderboard: data.leaderboard || []
                    };
                }
            }

            if (!room) {
                this.showToast('Kh√¥ng t√¨m th·∫•y ph√≤ng!', 'error');
                return;
            }

            this.showRoomDetailsModal(room);

        } catch (error) {
            console.error('Error viewing room details:', error);
            this.showToast('‚ùå L·ªói khi xem chi ti·∫øt ph√≤ng', 'error');
        }
    }

    // Hi·ªÉn th·ªã modal chi ti·∫øt ph√≤ng
    showRoomDetailsModal(room) {
        const modal = document.getElementById('room-details-modal');
        if (!modal) return;

        const modalContent = modal.querySelector('.room-details-modal-content');
        
        const sortedLeaderboard = (room.leaderboard || []).sort((a, b) => {
            if (b.score !== a.score) {
                return b.score - a.score;
            }
            return a.time - b.time;
        });

        // ‚≠ê Hi·ªÉn th·ªã badge n·∫øu l√† ph√≤ng c·ªßa m√¨nh
        const isMyRoom = room.creatorId === this.creatorId;
        const ownerBadge = isMyRoom ? '<span style="background: #10b981; color: white; padding: 4px 12px; border-radius: 12px; font-size: 12px; margin-left: 10px;"><i class="fas fa-crown"></i> Ph√≤ng c·ªßa b·∫°n</span>' : '';

        modalContent.innerHTML = `
            <div class="room-details-header">
                <div class="room-details-title-section">
                    <h2>${this.escapeHtml(room.name)} ${ownerBadge}</h2>
                    <div class="room-details-code">
                        <i class="fas fa-key"></i> M√£ ph√≤ng: ${room.code}
                    </div>
                    <p class="room-details-description">${this.escapeHtml(room.description)}</p>
                </div>
                <button class="btn-close-room-modal" onclick="roomManager.closeRoomDetailsModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="room-details-body">
                <div class="room-info-grid">
                    <div class="room-info-item">
                        <div class="room-info-label">
                            <i class="fas fa-book"></i>
                            ƒê·ªÅ thi
                        </div>
                        <div class="room-info-value">${this.escapeHtml(room.quiz.title)}</div>
                    </div>
                    <div class="room-info-item">
                        <div class="room-info-label">
                            <i class="fas fa-question-circle"></i>
                            S·ªë c√¢u h·ªèi
                        </div>
                        <div class="room-info-value">${room.quiz.totalQuestions} c√¢u</div>
                    </div>
                    <div class="room-info-item">
                        <div class="room-info-label">
                            <i class="fas fa-user"></i>
                            Ng∆∞·ªùi t·∫°o
                        </div>
                        <div class="room-info-value">${this.escapeHtml(room.creatorName)}</div>
                    </div>
                    <div class="room-info-item">
                        <div class="room-info-label">
                            <i class="fas fa-calendar"></i>
                            Ng√†y t·∫°o
                        </div>
                        <div class="room-info-value">${new Date(room.createdAt).toLocaleDateString('vi-VN')}</div>
                    </div>
                    <div class="room-info-item">
                        <div class="room-info-label">
                            <i class="fas fa-users"></i>
                            Ng∆∞·ªùi tham gia
                        </div>
                        <div class="room-info-value">${room.participants || 0}</div>
                    </div>
                    <div class="room-info-item">
                        <div class="room-info-label">
                            <i class="fas fa-pen"></i>
                            L∆∞·ª£t l√†m b√†i
                        </div>
                        <div class="room-info-value">${room.attempts || 0}</div>
                    </div>
                </div>

                <div class="room-leaderboard-section">
                    <div class="leaderboard-header">
                        <i class="fas fa-trophy"></i>
                        <h3>B·∫£ng X·∫øp H·∫°ng</h3>
                    </div>
                    
                    ${sortedLeaderboard.length > 0 ? `
                        <table class="leaderboard-table">
                            <thead>
                                <tr>
                                    <th>H·∫°ng</th>
                                    <th>Ng∆∞·ªùi ch∆°i</th>
                                    <th>ƒêi·ªÉm</th>
                                    <th>Th·ªùi gian</th>
                                    <th>Ng√†y l√†m</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${sortedLeaderboard.map((entry, index) => `
                                    <tr>
                                        <td class="leaderboard-rank rank-${index + 1}">
                                            ${index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : index + 1}
                                        </td>
                                        <td>
                                            <div class="leaderboard-player">
                                                <div class="leaderboard-avatar">
                                                    ${entry.userName.charAt(0).toUpperCase()}
                                                </div>
                                                <span class="leaderboard-name">${this.escapeHtml(entry.userName)}</span>
                                            </div>
                                        </td>
                                        <td class="leaderboard-score">${entry.score.toFixed(1)}/10</td>
                                        <td class="leaderboard-time">${this.formatTime(entry.time)}</td>
                                        <td class="leaderboard-time">${new Date(entry.completedAt).toLocaleDateString('vi-VN')}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    ` : `
                        <div class="leaderboard-empty">
                            <i class="fas fa-trophy"></i>
                            <p>Ch∆∞a c√≥ ai ho√†n th√†nh b√†i thi</p>
                            <p>H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n!</p>
                        </div>
                    `}
                </div>

                <div class="room-actions" style="margin-top: 30px; display: flex; gap: 15px; justify-content: center;">
                    <button class="btn-create-room" onclick="roomManager.startRoomQuiz('${room.id}')">
                        <i class="fas fa-play"></i>
                        V√†o L√†m B√†i
                    </button>
                    <button class="btn-share-room" onclick="roomManager.shareRoomCode('${room.code}')">
                        <i class="fas fa-share-alt"></i>
                        Chia S·∫ª M√£ Ph√≤ng
                    </button>
                </div>
            </div>
        `;

        modal.classList.add('active');
    }

    // ƒê√≥ng modal chi ti·∫øt ph√≤ng
    closeRoomDetailsModal() {
        const modal = document.getElementById('room-details-modal');
        if (modal) {
            modal.classList.remove('active');
        }
    }

    // Chia s·∫ª m√£ ph√≤ng
    shareRoomCode(code) {
        navigator.clipboard.writeText(code).then(() => {
            this.showToast(`üìã ƒê√£ copy m√£ ph√≤ng: ${code}`, 'success');
        }).catch(() => {
            alert(`M√£ ph√≤ng: ${code}\n\nH√£y chia s·∫ª m√£ n√†y cho ng∆∞·ªùi kh√°c!`);
        });
    }

    // ‚≠ê X√ìA PH√íNG - CH·ªà CHO PH√âP X√ìA PH√íNG C·ª¶A M√åNH
    async deleteRoom(roomId) {
        if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ph√≤ng n√†y kh√¥ng?')) {
            return;
        }

        try {
            // ‚≠ê KI·ªÇM TRA: Ch·ªâ cho ph√©p x√≥a ph√≤ng c·ªßa m√¨nh
            const room = this.myRooms.find(r => r.id === roomId);
            if (!room) {
                this.showToast('‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ph√≤ng n√†y!', 'error');
                return;
            }

            if (room.creatorId !== this.creatorId) {
                this.showToast('‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ph√≤ng n√†y!', 'error');
                console.error('üîí SECURITY: Attempted to delete room of another user!');
                return;
            }

            if (this.isSupabaseAvailable) {
                try {
                    // ‚≠ê DOUBLE CHECK: Th√™m ƒëi·ªÅu ki·ªán creator_id khi x√≥a
                    const { error } = await window.supabaseQuizManager.supabase
                        .from('exam_rooms')
                        .delete()
                        .eq('id', roomId)
                        .eq('creator_id', this.creatorId); // ‚≠ê B·∫ÆT BU·ªòC

                    if (!error) {
                        this.showToast('üóëÔ∏è ƒê√£ x√≥a phÔøΩÔøΩng th√†nh c√¥ng!', 'success');
                        await this.loadRooms();
                        return;
                    } else {
                        throw error;
                    }
                } catch (error) {
                    console.error('Supabase delete failed:', error);
                    this.showToast('‚ùå L·ªói khi x√≥a ph√≤ng: ' + error.message, 'error');
                }
            }

        } catch (error) {
            console.error('Error deleting room:', error);
            this.showToast('‚ùå L·ªói khi x√≥a ph√≤ng', 'error');
        }
    }

    // ‚≠ê NH·∫¨P PH√íNG B·∫∞NG M√É - C√ÅCH DUY NH·∫§T ƒê·ªÇ TRUY C·∫¨P PH√íNG NG∆Ø·ªúI KH√ÅC
    async joinRoom() {
        try {
            const code = document.getElementById('join-room-code-input').value.trim();

            if (!code) {
                this.showToast('Vui l√≤ng nh·∫≠p m√£ ph√≤ng!', 'warning');
                return;
            }

            if (code.length !== 6 || !/^\d{6}$/.test(code)) {
                this.showToast('M√£ ph√≤ng ph·∫£i l√† 6 ch·ªØ s·ªë!', 'warning');
                return;
            }

            this.showToast('üîç ƒêang t√¨m ph√≤ng...', 'info');

            if (!this.isSupabaseAvailable) {
                this.showToast('‚ùå Supabase ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!', 'error');
                return;
            }

            try {
                // ‚≠ê T√åM PH√íNG B·∫∞NG M√É - KH√îNG QUAN T√ÇM CREATOR_ID
                const { data, error } = await window.supabaseQuizManager.supabase
                    .from('exam_rooms')
                    .select('*')
                    .eq('code', code) // Ch·ªâ t√¨m theo m√£
                    .single();

                if (error || !data) {
                    this.showToast('‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng v·ªõi m√£ n√†y!', 'error');
                    return;
                }

                const room = {
                    id: data.id,
                    name: data.name,
                    code: data.code,
                    description: data.description,
                    quiz: data.quiz_data,
                    creatorName: data.creator_name,
                    creatorId: data.creator_id,
                    createdAt: data.created_at,
                    participants: data.participants || 0,
                    attempts: data.attempts || 0,
                    leaderboard: data.leaderboard || []
                };

                console.log('‚úÖ Found room by code:', code);
                console.log('üîê Room creator:', room.creatorId);
                console.log('üîê My creator:', this.creatorId);

                // Hi·ªÉn th·ªã chi ti·∫øt ph√≤ng
                this.showRoomDetailsModal(room);

                // Clear input
                document.getElementById('join-room-code-input').value = '';

            } catch (error) {
                console.error('Supabase search failed:', error);
                this.showToast('‚ùå L·ªói khi t√¨m ph√≤ng', 'error');
            }

        } catch (error) {
            console.error('Error joining room:', error);
            this.showToast('‚ùå L·ªói khi t√¨m ph√≤ng', 'error');
        }
    }

    // C√°c h√†m c√≤n l·∫°i gi·ªëng nh∆∞ tr∆∞·ªõc...
    // (startRoomQuiz, ensureQuizManagerReady, getUserNameForRoom, etc.)
    // T√¥i s·∫Ω gi·ªØ nguy√™n ƒë·ªÉ kh√¥ng l√†m file qu√° d√†i

    async ensureQuizManagerReady() {
        if (window.quizManager) {
            return true;
        }

        console.log('‚è≥ QuizManager not found, attempting to initialize...');
        
        if (typeof QuizManager === 'undefined') {
            console.error('‚ùå QuizManager class not loaded');
            return false;
        }

        try {
            window.quizManager = new QuizManager();
            console.log('‚úÖ QuizManager initialized successfully');
            await new Promise(resolve => setTimeout(resolve, 500));
            return true;
        } catch (error) {
            console.error('‚ùå Failed to initialize QuizManager:', error);
            return false;
        }
    }

    async startRoomQuiz(roomId) {
        try {
            this.showToast('‚è≥ ƒêang chu·∫©n b·ªã h·ªá th·ªëng...', 'info');
            
            const isReady = await this.ensureQuizManagerReady();
            
            if (!isReady) {
                this.showToast('‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o h·ªá th·ªëng. Vui l√≤ng t·∫£i l·∫°i trang!', 'error');
                setTimeout(() => {
                    if (confirm('H·ªá th·ªëng c·∫ßn t·∫£i l·∫°i trang ƒë·ªÉ ho·∫°t ƒë·ªông. T·∫£i l·∫°i ngay?')) {
                        window.location.reload();
                    }
                }, 1000);
                return;
            }

            let room = this.myRooms.find(r => r.id === roomId);

            if (!room && this.isSupabaseAvailable) {
                const { data, error } = await window.supabaseQuizManager.supabase
                    .from('exam_rooms')
                    .select('*')
                    .eq('id', roomId)
                    .single();

                if (!error && data) {
                    room = {
                        id: data.id,
                        name: data.name,
                        code: data.code,
                        description: data.description,
                        quiz: data.quiz_data,
                        creatorName: data.creator_name,
                        creatorId: data.creator_id,
                        createdAt: data.created_at,
                        participants: data.participants || 0,
                        attempts: data.attempts || 0,
                        leaderboard: data.leaderboard || []
                    };
                }
            }

            if (!room) {
                this.showToast('Kh√¥ng t√¨m th·∫•y ph√≤ng!', 'error');
                return;
            }

            const userName = this.getUserNameForRoom(room.code);
            
            if (!userName) {
                this.showUserNameModal(room);
                return;
            }

            this.startQuizWithUserName(room, userName);

        } catch (error) {
            console.error('Error starting room quiz:', error);
            this.showToast('‚ùå L·ªói khi b·∫Øt ƒë·∫ßu l√†m b√†i', 'error');
        }
    }

    getUserNameForRoom(roomCode) {
        return this.userRoomHistory[roomCode] || null;
    }

    saveUserNameForRoom(roomCode, userName) {
        this.userRoomHistory[roomCode] = userName;
        localStorage.setItem('userRoomHistory', JSON.stringify(this.userRoomHistory));
    }

    showUserNameModal(room) {
        const modal = document.getElementById('user-name-modal');
        if (!modal) return;

        const modalContent = modal.querySelector('.user-name-modal-content');
        
        modalContent.innerHTML = `
            <h3>Nh·∫≠p T√™n C·ªßa B·∫°n</h3>
            <p>ƒê·ªÉ tham gia ph√≤ng thi v√† xu·∫•t hi·ªán tr√™n b·∫£ng x·∫øp h·∫°ng</p>
            <input type="text" 
                   id="user-name-input-modal" 
                   class="user-name-input" 
                   placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n..."
                   maxlength="50">
            <button class="btn-submit-name" onclick="roomManager.submitUserName('${room.id}', '${room.code}')">
                <i class="fas fa-check"></i>
                X√°c Nh·∫≠n
            </button>
        `;

        modal.classList.add('active');

        setTimeout(() => {
            const input = document.getElementById('user-name-input-modal');
            if (input) {
                input.focus();
                input.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.submitUserName(room.id, room.code);
                    }
                });
            }
        }, 100);
    }

    closeUserNameModal() {
        const modal = document.getElementById('user-name-modal');
        if (modal) {
            modal.classList.remove('active');
        }
    }

    async submitUserName(roomId, roomCode) {
        const input = document.getElementById('user-name-input-modal');
        if (!input) return;

        const userName = input.value.trim();

        if (!userName) {
            this.showToast('Vui l√≤ng nh·∫≠p t√™n!', 'warning');
            input.focus();
            return;
        }

        this.saveUserNameForRoom(roomCode, userName);
        this.currentUserName = userName;
        localStorage.setItem('roomUserName', userName);

        this.closeUserNameModal();

        let room = this.myRooms.find(r => r.id === roomId);

        if (!room && this.isSupabaseAvailable) {
            const { data } = await window.supabaseQuizManager.supabase
                .from('exam_rooms')
                .select('*')
                .eq('id', roomId)
                .single();

            if (data) {
                room = {
                    id: data.id,
                    name: data.name,
                    code: data.code,
                    description: data.description,
                    quiz: data.quiz_data,
                    creatorName: data.creator_name,
                    creatorId: data.creator_id,
                    createdAt: data.created_at,
                    participants: data.participants || 0,
                    attempts: data.attempts || 0,
                    leaderboard: data.leaderboard || []
                };
            }
        }

        if (!room) {
            this.showToast('Kh√¥ng t√¨m th·∫•y ph√≤ng!', 'error');
            return;
        }

        this.startQuizWithUserName(room, userName);
    }

    startQuizWithUserName(room, userName) {
        if (!window.quizManager) {
            this.showToast('‚ùå H·ªá th·ªëng ch∆∞a s·∫µn s√†ng. Vui l√≤ng t·∫£i l·∫°i trang!', 'error');
            return;
        }

        if (!room || !room.quiz || !room.quiz.questions) {
            this.showToast('‚ùå D·ªØ li·ªáu ph√≤ng thi kh√¥ng h·ª£p l·ªá!', 'error');
            return;
        }

        this.closeRoomDetailsModal();

        this.currentRoom = {
            ...room,
            userName: userName
        };

        this.incrementRoomAttempts(room.id);

        const quizData = {
            id: room.quiz.id,
            title: room.quiz.title,
            description: room.quiz.description || '',
            questions: room.quiz.questions,
            totalQuestions: room.quiz.totalQuestions || room.quiz.questions.length,
            isRoomQuiz: true,
            roomId: room.id,
            roomCode: room.code,
            roomName: room.name,
            userName: userName
        };

        const protectedQuizData = JSON.parse(JSON.stringify(quizData));
        
        window.quizManager.currentQuiz = protectedQuizData;
        window.quizManager.currentAnswers = {};
        window.quizManager.currentQuestionIndex = 0;

        try {
            if (typeof window.quizManager.switchTab === 'function') {
                window.quizManager.switchTab('quiz');
            }
        } catch (error) {
            console.error('Error switching tab:', error);
        }

        setTimeout(() => {
            window.quizManager.currentQuiz = protectedQuizData;
            window.quizManager.currentAnswers = {};
            window.quizManager.currentQuestionIndex = 0;
            window.quizManager._quizBackup = JSON.parse(JSON.stringify(protectedQuizData));
            
            try {
                if (typeof window.quizManager.renderQuiz === 'function') {
                    window.quizManager.renderQuiz();
                    
                    setTimeout(() => {
                        if (!window.quizManager.currentQuiz) {
                            window.quizManager.currentQuiz = protectedQuizData;
                            window.quizManager.renderQuiz();
                        } else {
                            this.showToast(`üöÄ Ch√†o ${userName}! B·∫Øt ƒë·∫ßu l√†m b√†i!`, 'success');
                        }
                    }, 200);
                }
            } catch (error) {
                console.error('Error rendering quiz:', error);
                this.showToast('‚ùå L·ªói khi hi·ªÉn th·ªã b√†i thi', 'error');
            }
        }, 300);
    }

    async incrementRoomAttempts(roomId) {
        try {
            if (this.isSupabaseAvailable) {
                const { data } = await window.supabaseQuizManager.supabase
                    .from('exam_rooms')
                    .select('attempts')
                    .eq('id', roomId)
                    .single();

                if (data) {
                    await window.supabaseQuizManager.supabase
                        .from('exam_rooms')
                        .update({ attempts: (data.attempts || 0) + 1 })
                        .eq('id', roomId);
                }
            }
        } catch (error) {
            console.error('Error incrementing attempts:', error);
        }
    }

    async saveResultToLeaderboard(roomId, result) {
        try {
            const entry = {
                userName: result.userName,
                score: result.score,
                correctCount: result.correctCount,
                totalQuestions: result.totalQuestions,
                time: result.totalTime,
                completedAt: new Date().toISOString()
            };

            if (this.isSupabaseAvailable) {
                const { data } = await window.supabaseQuizManager.supabase
                    .from('exam_rooms')
                    .select('leaderboard')
                    .eq('id', roomId)
                    .single();

                if (data) {
                    const leaderboard = data.leaderboard || [];
                    
                    const existingIndex = leaderboard.findIndex(e => e.userName === entry.userName);
                    
                    if (existingIndex >= 0) {
                        if (entry.score > leaderboard[existingIndex].score) {
                            leaderboard[existingIndex] = entry;
                        }
                    } else {
                        leaderboard.push(entry);
                    }

                    await window.supabaseQuizManager.supabase
                        .from('exam_rooms')
                        .update({ leaderboard: leaderboard })
                        .eq('id', roomId);
                }
            }

            this.showToast('üìä ƒê√£ l∆∞u k·∫øt quÔøΩÔøΩ v√†o b·∫£ng x·∫øp h·∫°ng!', 'success');

        } catch (error) {
            console.error('Error saving to leaderboard:', error);
        }
    }

    clearRoomForm() {
        document.getElementById('room-name-input').value = '';
        document.getElementById('room-code-input').value = '';
        document.getElementById('room-description-input').value = '';
        document.getElementById('room-quiz-selector').value = '';
    }

    showLoading(show) {
        const loader = document.getElementById('rooms-loading');
        if (loader) {
            loader.style.display = show ? 'flex' : 'none';
        }
    }

    formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${minutes}:${secs.toString().padStart(2, '0')}`;
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    loadQuizSelector() {
        const selector = document.getElementById('room-quiz-selector');
        if (!selector) {
            console.warn('‚ö†Ô∏è Room quiz selector not found');
            return;
        }

        selector.innerHTML = '<option value="">-- Ch·ªçn ƒë·ªÅ thi t·ª´ Qu·∫£n l√Ω Quiz --</option>';

        let quizzes = [];
        
        if (window.quizManager && window.quizManager.quizzes) {
            quizzes = window.quizManager.quizzes;
        }
        
        if (quizzes.length === 0) {
            try {
                const storedQuizzes = localStorage.getItem('quizzes');
                if (storedQuizzes) {
                    quizzes = JSON.parse(storedQuizzes);
                }
            } catch (error) {
                console.error('Error loading quizzes from localStorage:', error);
            }
        }

        if (quizzes && quizzes.length > 0) {
            quizzes.forEach(quiz => {
                const option = document.createElement('option');
                option.value = quiz.id;
                option.textContent = `${quiz.title} (${quiz.totalQuestions} c√¢u)`;
                selector.appendChild(option);
            });
        } else {
            const helpOption = document.createElement('option');
            helpOption.value = '';
            helpOption.textContent = '-- Vui l√≤ng t·∫°o quiz tr∆∞·ªõc trong m·ª•c "Qu·∫£n L√Ω Quiz" --';
            helpOption.disabled = true;
            helpOption.style.color = '#999';
            selector.appendChild(helpOption);
        }
    }
}

// Initialize Room Manager
let roomManager;
document.addEventListener('DOMContentLoaded', () => {
    roomManager = new RoomManager();
    
    setTimeout(() => {
        roomManager.initialize();
    }, 2000);
    
    document.querySelectorAll('[data-tab="room"]').forEach(btn => {
        btn.addEventListener('click', () => {
            setTimeout(() => {
                if (roomManager) {
                    roomManager.loadQuizSelector();
                }
            }, 100);
        });
    });
    
    setTimeout(() => {
        if (window.QuizManager && window.QuizManager.prototype) {
            const originalSaveQuizzes = window.QuizManager.prototype.saveQuizzes;
            window.QuizManager.prototype.saveQuizzes = function() {
                originalSaveQuizzes.call(this);
                if (window.roomManager) {
                    setTimeout(() => {
                        window.roomManager.loadQuizSelector();
                    }, 100);
                }
            };
        }
    }, 1000);
    
    window.addEventListener('storage', (e) => {
        if (e.key === 'quizzes' && window.roomManager) {
            window.roomManager.loadQuizSelector();
        }
    });
});

// Export
window.roomManager = roomManager;
