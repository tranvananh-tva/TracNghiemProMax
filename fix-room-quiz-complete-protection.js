// COMPLETE PROTECTION FOR ROOM QUIZ - FIX ALL NAVIGATION ISSUES
// S·ª≠a l·ªói: Cannot go to next question: currentQuiz is null
// S·ª≠a l·ªói: Cannot go to question: currentQuiz is null (script-modern.js)

(function() {
    console.log('üõ°Ô∏è [COMPLETE PROTECTION] Loading Complete Room Quiz Protection...');

    // ƒê·ª£i t·∫•t c·∫£ components s·∫µn s√†ng
    function waitForAll(callback) {
        const checkReady = () => {
            if (window.QuizManager && 
                window.QuizManager.prototype &&
                window.roomManager) {
                callback();
            } else {
                setTimeout(checkReady, 100);
            }
        };
        checkReady();
    }

    waitForAll(() => {
        console.log('‚úÖ [COMPLETE PROTECTION] All components ready');

        // ============================================
        // GLOBAL QUIZ DATA STORE - KH√îNG BAO GI·ªú M·∫§T
        // ============================================
        window._globalQuizStore = {
            currentQuiz: null,
            currentAnswers: {},
            currentQuestionIndex: 0,
            startTime: null,
            
            // L∆∞u quiz data
            save: function(quiz) {
                if (quiz && quiz.questions && quiz.questions.length > 0) {
                    this.currentQuiz = JSON.parse(JSON.stringify(quiz));
                    console.log('üíæ [GLOBAL STORE] Quiz saved:', {
                        title: quiz.title,
                        questions: quiz.questions.length,
                        isRoomQuiz: quiz.isRoomQuiz
                    });
                }
            },
            
            // L·∫•y quiz data
            get: function() {
                return this.currentQuiz;
            },
            
            // Ki·ªÉm tra c√≥ quiz kh√¥ng
            has: function() {
                return this.currentQuiz && 
                       this.currentQuiz.questions && 
                       this.currentQuiz.questions.length > 0;
            },
            
            // Clear data
            clear: function() {
                this.currentQuiz = null;
                this.currentAnswers = {};
                this.currentQuestionIndex = 0;
                this.startTime = null;
                console.log('ÔøΩÔøΩÔ∏è [GLOBAL STORE] Cleared');
            }
        };

        // ============================================
        // RESTORE FUNCTION - KH√îI PH·ª§C QUIZ DATA
        // ============================================
        window.restoreQuizData = function(context) {
            // N·∫øu ƒë√£ c√≥ currentQuiz h·ª£p l·ªá, kh√¥ng c·∫ßn restore
            if (context.currentQuiz && 
                context.currentQuiz.questions && 
                context.currentQuiz.questions.length > 0) {
                return true;
            }

            console.warn('‚ö†Ô∏è [RESTORE] currentQuiz is missing, attempting restore...');

            // Priority 1: Restore t·ª´ Global Store
            if (window._globalQuizStore.has()) {
                context.currentQuiz = JSON.parse(JSON.stringify(window._globalQuizStore.get()));
                console.log('‚úÖ [RESTORE] Restored from Global Store');
                return true;
            }

            // Priority 2: Restore t·ª´ _quizBackup
            if (context._quizBackup && 
                context._quizBackup.questions && 
                context._quizBackup.questions.length > 0) {
                context.currentQuiz = JSON.parse(JSON.stringify(context._quizBackup));
                window._globalQuizStore.save(context.currentQuiz);
                console.log('‚úÖ [RESTORE] Restored from _quizBackup');
                return true;
            }

            // Priority 3: Restore t·ª´ roomManager
            if (window.roomManager && 
                window.roomManager.currentRoom && 
                window.roomManager.currentRoom.quiz &&
                window.roomManager.currentRoom.quiz.questions &&
                window.roomManager.currentRoom.quiz.questions.length > 0) {
                
                const room = window.roomManager.currentRoom;
                context.currentQuiz = {
                    id: room.quiz.id,
                    title: room.quiz.title,
                    description: room.quiz.description || '',
                    questions: room.quiz.questions,
                    totalQuestions: room.quiz.totalQuestions || room.quiz.questions.length,
                    isRoomQuiz: true,
                    roomId: room.id,
                    roomCode: room.code,
                    roomName: room.name,
                    userName: room.userName
                };
                
                // L∆∞u v√†o c·∫£ backup v√† global store
                context._quizBackup = JSON.parse(JSON.stringify(context.currentQuiz));
                window._globalQuizStore.save(context.currentQuiz);
                
                console.log('‚úÖ [RESTORE] Restored from roomManager');
                return true;
            }

            console.error('‚ùå [RESTORE] Cannot restore - no valid source found');
            return false;
        };

        // ============================================
        // OVERRIDE ensureQuizData (t·ª´ script-modern.js)
        // ============================================
        window.ensureQuizData = function(context) {
            console.log('üîç [ensureQuizData] Checking quiz data...');
            
            // Th·ª≠ restore n·∫øu c·∫ßn
            if (!context.currentQuiz || !context.currentQuiz.questions || context.currentQuiz.questions.length === 0) {
                console.warn('‚ö†Ô∏è [ensureQuizData] Quiz data missing, attempting restore...');
                const restored = window.restoreQuizData(context);
                
                if (restored) {
                    console.log('‚úÖ [ensureQuizData] Quiz data restored successfully');
                    return true;
                } else {
                    console.error('‚ùå [ensureQuizData] Failed to restore quiz data');
                    return false;
                }
            }
            
            console.log('‚úÖ [ensureQuizData] Quiz data is valid');
            return true;
        };

        console.log('‚úÖ [PROTECTION] ensureQuizData created/overridden');

        // ============================================
        // PROTECT ALL NAVIGATION METHODS
        // ============================================
        const navigationMethods = [
            'nextQuestion',
            'previousQuestion',
            'goToQuestion',
            'renderQuiz',
            'renderQuizModern',
            'renderQuestion',
            'updateAnswer',
            'updateAnswerModern',
            'submitQuiz',
            'updateProgressBar',
            'updateProgressBarModern'
        ];

        navigationMethods.forEach(methodName => {
            const original = window.QuizManager.prototype[methodName];
            if (typeof original === 'function') {
                window.QuizManager.prototype[methodName] = function(...args) {
                    // Lu√¥n th·ª≠ restore tr∆∞·ªõc khi th·ª±c thi
                    if (!window.restoreQuizData(this)) {
                        console.error(`‚ùå [${methodName}] Cannot execute: quiz data unavailable`);
                        
                        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
                        if (this.showToast) {
                            this.showToast('‚ùå L·ªói: M·∫•t d·ªØ li·ªáu b√†i thi. ƒêang th·ª≠ kh√¥i ph·ª•c...', 'error');
                        }
                        
                        // Th·ª≠ reload trang sau 2 gi√¢y
                        setTimeout(() => {
                            if (!window.restoreQuizData(this)) {
                                if (confirm('Kh√¥ng th·ªÉ kh√¥i ph·ª•c d·ªØ li·ªáu b√†i thi.\n\nB·∫°n c√≥ mu·ªën t·∫£i l·∫°i trang kh√¥ng?\n\n(L∆∞u √Ω: Ti·∫øn tr√¨nh l√†m b√†i s·∫Ω b·ªã m·∫•t)')) {
                                    window.location.reload();
                                }
                            }
                        }, 2000);
                        
                        return;
                    }

                    // ƒê·∫£m b·∫£o totalQuestions t·ªìn t·∫°i
                    if (!this.currentQuiz.totalQuestions && this.currentQuiz.questions) {
                        this.currentQuiz.totalQuestions = this.currentQuiz.questions.length;
                    }

                    // Th·ª±c thi method g·ªëc
                    try {
                        const result = original.apply(this, args);
                        
                        // Sau khi th·ª±c thi th√†nh c√¥ng, l∆∞u l·∫°i v√†o global store
                        if (this.currentQuiz && this.currentQuiz.questions) {
                            window._globalQuizStore.save(this.currentQuiz);
                            
                            // ƒê·∫£m b·∫£o backup t·ªìn t·∫°i
                            if (!this._quizBackup || !this._quizBackup.questions) {
                                this._quizBackup = JSON.parse(JSON.stringify(this.currentQuiz));
                            }
                        }
                        
                        return result;
                    } catch (error) {
                        console.error(`‚ùå [${methodName}] Error:`, error);
                        
                        // Th·ª≠ restore v√† th·ª±c thi l·∫°i
                        if (window.restoreQuizData(this)) {
                            console.log(`üîÑ [${methodName}] Retrying after restore...`);
                            try {
                                return original.apply(this, args);
                            } catch (retryError) {
                                console.error(`‚ùå [${methodName}] Retry failed:`, retryError);
                            }
                        }
                        
                        throw error;
                    }
                };
                
                console.log(`‚úÖ [PROTECTION] Protected: ${methodName}`);
            }
        });

        // ============================================
        // OVERRIDE startQuizWithUserName - QUAN TR·ªåNG NH·∫§T
        // ============================================
        const originalStartQuizWithUserName = window.RoomManager.prototype.startQuizWithUserName;
        window.RoomManager.prototype.startQuizWithUserName = function(room, userName) {
            console.log('üéØ [START QUIZ] Starting with complete protection...');
            
            // Validate room data
            if (!room || !room.quiz || !room.quiz.questions || room.quiz.questions.length === 0) {
                console.error('‚ùå [START QUIZ] Invalid room data:', room);
                this.showToast('‚ùå D·ªØ li·ªáu ph√≤ng thi kh√¥ng h·ª£p l·ªá!', 'error');
                return;
            }

            console.log('üìä [START QUIZ] Room data:', {
                name: room.name,
                code: room.code,
                quizTitle: room.quiz.title,
                totalQuestions: room.quiz.questions.length
            });

            // T·∫°o quiz data ƒë·∫ßy ƒë·ªß
            const quizData = {
                id: room.quiz.id,
                title: room.quiz.title,
                description: room.quiz.description || '',
                questions: JSON.parse(JSON.stringify(room.quiz.questions)), // Deep copy
                totalQuestions: room.quiz.questions.length,
                isRoomQuiz: true,
                roomId: room.id,
                roomCode: room.code,
                roomName: room.name,
                userName: userName
            };

            // L∆∞u v√†o Global Store TR∆Ø·ªöC
            window._globalQuizStore.save(quizData);
            console.log('üíæ [START QUIZ] Saved to Global Store');

            // ƒê√≥ng modal
            this.closeRoomDetailsModal();

            // Set current room
            this.currentRoom = {
                ...room,
                userName: userName
            };

            // TƒÉng attempts
            this.incrementRoomAttempts(room.id);

            // ƒê·∫£m b·∫£o quizManager t·ªìn t·∫°i
            if (!window.quizManager) {
                console.error('‚ùå [START QUIZ] quizManager not found!');
                this.showToast('‚ùå H·ªá th·ªëng ch∆∞a s·∫µn s√†ng. Vui l√≤ng t·∫£i l·∫°i trang!', 'error');
                return;
            }

            // Set quiz data v√†o quizManager
            window.quizManager.currentQuiz = JSON.parse(JSON.stringify(quizData));
            window.quizManager._quizBackup = JSON.parse(JSON.stringify(quizData));
            window.quizManager.currentAnswers = {};
            window.quizManager.currentQuestionIndex = 0;

            console.log('‚úÖ [START QUIZ] Quiz data set to quizManager');

            // Chuy·ªÉn tab TR∆Ø·ªöC
            if (typeof window.quizManager.switchTab === 'function') {
                window.quizManager.switchTab('quiz');
            }

            // ƒê·ª£i tab switch xong, sau ƒë√≥ render
            setTimeout(() => {
                // Set l·∫°i quiz data (ph√≤ng tr∆∞·ªùng h·ª£p b·ªã clear khi switch tab)
                window.quizManager.currentQuiz = JSON.parse(JSON.stringify(quizData));
                window.quizManager._quizBackup = JSON.parse(JSON.stringify(quizData));
                window.quizManager.currentAnswers = {};
                window.quizManager.currentQuestionIndex = 0;
                
                // L∆∞u l·∫°i v√†o Global Store
                window._globalQuizStore.save(quizData);
                
                console.log('‚úÖ [START QUIZ] Quiz data re-set after tab switch');

                // Render quiz
                if (typeof window.quizManager.renderQuiz === 'function') {
                    try {
                        window.quizManager.renderQuiz();
                        console.log('‚úÖ [START QUIZ] Quiz rendered successfully');
                        
                        if (this.showToast) {
                            this.showToast(`üöÄ Ch√†o ${userName}! B·∫Øt ƒë·∫ßu l√†m b√†i!`, 'success');
                        }
                    } catch (error) {
                        console.error('‚ùå [START QUIZ] Render error:', error);
                        this.showToast('‚ùå L·ªói khi hi·ªÉn th·ªã b√†i thi', 'error');
                    }
                }
            }, 300);
        };

        console.log('‚úÖ [PROTECTION] startQuizWithUserName overridden');

        // ============================================
        // PERIODIC HEALTH CHECK - M·ªñI 2 GI√ÇY
        // ============================================
        setInterval(() => {
            if (window.quizManager && window.quizManager.currentQuiz) {
                // Ki·ªÉm tra currentQuiz c√≥ h·ª£p l·ªá kh√¥ng
                if (!window.quizManager.currentQuiz.questions || 
                    window.quizManager.currentQuiz.questions.length === 0) {
                    
                    console.warn('‚ö†Ô∏è [HEALTH CHECK] currentQuiz invalid, restoring...');
                    window.restoreQuizData(window.quizManager);
                }
                
                // ƒê·∫£m b·∫£o totalQuestions t·ªìn t·∫°i
                if (!window.quizManager.currentQuiz.totalQuestions && 
                    window.quizManager.currentQuiz.questions) {
                    window.quizManager.currentQuiz.totalQuestions = window.quizManager.currentQuiz.questions.length;
                }
                
                // ƒê·∫£m b·∫£o backup t·ªìn t·∫°i
                if (!window.quizManager._quizBackup || !window.quizManager._quizBackup.questions) {
                    window.quizManager._quizBackup = JSON.parse(JSON.stringify(window.quizManager.currentQuiz));
                }
                
                // ƒê·∫£m b·∫£o Global Store c√≥ data
                if (!window._globalQuizStore.has()) {
                    window._globalQuizStore.save(window.quizManager.currentQuiz);
                }
            }
        }, 2000);

        console.log('‚úÖ [HEALTH CHECK] Started (every 2 seconds)');

        // ============================================
        // MONITOR QUIZ STATE CHANGES
        // ============================================
        let lastQuizState = null;
        setInterval(() => {
            if (window.quizManager) {
                const currentState = window.quizManager.currentQuiz ? 'exists' : 'null';
                
                if (currentState !== lastQuizState) {
                    console.log(`üìä [STATE MONITOR] Quiz state: ${lastQuizState} ‚Üí ${currentState}`);
                    
                    if (currentState === 'null') {
                        console.warn('‚ö†Ô∏è [STATE MONITOR] Quiz was cleared! Attempting restore...');
                        window.restoreQuizData(window.quizManager);
                    }
                    
                    lastQuizState = currentState;
                }
            }
        }, 1000);

        console.log('‚úÖ [STATE MONITOR] Started (every 1 second)');

        // ============================================
        // WINDOW UNLOAD - L∆ØU TR∆Ø·ªöC KHI ƒê√ìNG
        // ============================================
        window.addEventListener('beforeunload', () => {
            if (window.quizManager && window.quizManager.currentQuiz) {
                window._globalQuizStore.save(window.quizManager.currentQuiz);
                console.log('üíæ [UNLOAD] Quiz saved before page close');
            }
        });

        // ============================================
        // HO√ÄN T·∫§T
        // ============================================
        console.log('‚úÖ [COMPLETE PROTECTION] All protections applied!');
        console.log('üìã [COMPLETE PROTECTION] Summary:');
        console.log('  ‚úì Global Quiz Store created');
        console.log('  ‚úì Restore function ready (global)');
        console.log('  ‚úì ensureQuizData created/overridden');
        console.log(`  ‚úì ${navigationMethods.length} methods protected`);
        console.log('  ‚úì startQuizWithUserName overridden');
        console.log('  ‚úì Health check running (2s)');
        console.log('  ‚úì State monitor running (1s)');
        console.log('  ‚úì Unload handler registered');
    });
})();
