// ============================================================================
// PATCH updateAnswerModern - LOAD NGAY SAU script-modern.js
// ============================================================================
// Thay th·∫ø HO√ÄN TO√ÄN h√†m updateAnswerModern ƒë·ªÉ fix l·ªói currentQuiz null
// ============================================================================

(function() {
    console.log('üîß PATCHING updateAnswerModern...');
    
    // ƒê·ª£i QuizManager load
    let attempts = 0;
    const maxAttempts = 50;
    
    const patchInterval = setInterval(() => {
        attempts++;
        
        if (window.QuizManager && window.QuizManager.prototype) {
            clearInterval(patchInterval);
            
            console.log('‚úÖ QuizManager found, applying patch...');
            
            // THAY TH·∫æ HO√ÄN TO√ÄN
            QuizManager.prototype.updateAnswerModern = function(questionIndex, selectedAnswer) {
                console.log(`‚úèÔ∏è [PATCHED] updateAnswerModern: Q${questionIndex} = ${selectedAnswer}`);
                
                // ============================================================
                // KI·ªÇM TRA V√Ä RESTORE - TUY·ªÜT ƒê·ªêI KH√îNG NULL
                // ============================================================
                
                if (!this.currentQuiz || !this.currentQuiz.questions) {
                    console.error('‚ùå currentQuiz is null, attempting restore...');
                    
                    let restored = false;
                    
                    // 1. T·ª´ _quizBackup
                    if (!restored && this._quizBackup && this._quizBackup.questions) {
                        this.currentQuiz = JSON.parse(JSON.stringify(this._quizBackup));
                        console.log('‚úÖ Restored from _quizBackup');
                        restored = true;
                    }
                    
                    // 2. T·ª´ localStorage.quizBackup
                    if (!restored) {
                        try {
                            const backup = localStorage.getItem('quizBackup');
                            if (backup) {
                                const data = JSON.parse(backup);
                                if (data && data.questions) {
                                    this.currentQuiz = data;
                                    this._quizBackup = JSON.parse(JSON.stringify(data));
                                    console.log('‚úÖ Restored from localStorage.quizBackup');
                                    restored = true;
                                }
                            }
                        } catch (e) {
                            console.error('Error restoring from quizBackup:', e);
                        }
                    }
                    
                    // 3. T·ª´ localStorage.currentRoomQuiz
                    if (!restored) {
                        try {
                            const backup = localStorage.getItem('currentRoomQuiz');
                            if (backup) {
                                const data = JSON.parse(backup);
                                if (data && data.questions) {
                                    this.currentQuiz = data;
                                    this._quizBackup = JSON.parse(JSON.stringify(data));
                                    console.log('‚úÖ Restored from localStorage.currentRoomQuiz');
                                    restored = true;
                                }
                            }
                        } catch (e) {
                            console.error('Error restoring from currentRoomQuiz:', e);
                        }
                    }
                    
                    // 4. T·ª´ roomManager.currentRoom
                    if (!restored && window.roomManager && window.roomManager.currentRoom && window.roomManager.currentRoom.quiz) {
                        try {
                            const room = window.roomManager.currentRoom;
                            const quiz = room.quiz;
                            
                            this.currentQuiz = {
                                id: quiz.id,
                                title: quiz.title,
                                description: quiz.description || '',
                                questions: JSON.parse(JSON.stringify(quiz.questions)),
                                totalQuestions: quiz.totalQuestions || quiz.questions.length,
                                isRoomQuiz: true,
                                roomId: room.id,
                                roomCode: room.code,
                                roomName: room.name,
                                userName: room.userName
                            };
                            
                            this._quizBackup = JSON.parse(JSON.stringify(this.currentQuiz));
                            localStorage.setItem('quizBackup', JSON.stringify(this.currentQuiz));
                            localStorage.setItem('currentRoomQuiz', JSON.stringify(this.currentQuiz));
                            
                            console.log('‚úÖ Restored from roomManager.currentRoom');
                            restored = true;
                        } catch (e) {
                            console.error('Error restoring from roomManager:', e);
                        }
                    }
                    
                    // 5. N·∫øu v·∫´n kh√¥ng restore ƒë∆∞·ª£c
                    if (!restored || !this.currentQuiz || !this.currentQuiz.questions) {
                        console.error('‚ùå CANNOT RESTORE - ALL SOURCES FAILED');
                        console.error('Available sources:');
                        console.error('1. _quizBackup:', this._quizBackup);
                        console.error('2. localStorage.quizBackup:', localStorage.getItem('quizBackup'));
                        console.error('3. localStorage.currentRoomQuiz:', localStorage.getItem('currentRoomQuiz'));
                        console.error('4. roomManager.currentRoom:', window.roomManager?.currentRoom);
                        
                        alert('‚ùå L·ªñI: D·ªØ li·ªáu b√†i thi b·ªã m·∫•t!\n\nVui l√≤ng:\n1. Ch·ª•p m√†n h√¨nh Console (F12)\n2. B√°o l·ªói ngay\n3. KH√îNG t·∫£i l·∫°i trang');
                        return;
                    }
                }
                
                // ============================================================
                // L∆ØU C√ÇU TR·∫¢ L·ªúI
                // ============================================================
                
                this.currentAnswers[questionIndex] = selectedAnswer;
                console.log(`‚úÖ Answer saved: Q${questionIndex} = ${selectedAnswer}`);
                
                // ============================================================
                // C·∫¨P NH·∫¨T GIAO DI·ªÜN
                // ============================================================
                
                try {
                    // Update option styling
                    const selectedInput = document.querySelector(`#q${questionIndex}_${selectedAnswer}`);
                    if (selectedInput) {
                        const optionModern = selectedInput.closest('.option-modern');
                        if (optionModern) {
                            document.querySelectorAll(`input[name="question_${questionIndex}"]`).forEach(input => {
                                const parent = input.closest('.option-modern');
                                if (parent) parent.classList.remove('selected');
                            });
                            optionModern.classList.add('selected');
                        }
                    }
                    
                    // Update question grid
                    const gridItem = document.querySelector(`.question-grid-item[data-question="${questionIndex}"]`);
                    if (gridItem) {
                        gridItem.classList.add('answered');
                    }
                    
                    // Update progress bar
                    if (typeof this.updateProgressBarModern === 'function') {
                        this.updateProgressBarModern();
                    } else if (typeof this.updateProgressBar === 'function') {
                        this.updateProgressBar();
                    }
                    
                    // Auto next
                    const autoNext = document.getElementById('auto-next');
                    if (autoNext && autoNext.checked && this.currentQuiz && questionIndex < this.currentQuiz.totalQuestions - 1) {
                        setTimeout(() => {
                            if (this.currentQuiz && this.currentQuiz.questions && typeof this.nextQuestion === 'function') {
                                this.nextQuestion();
                            }
                        }, 500);
                    }
                    
                } catch (error) {
                    console.error('Error updating UI:', error);
                }
            };
            
            console.log('‚úÖ PATCH APPLIED SUCCESSFULLY!');
            console.log('üìù updateAnswerModern has been replaced');
            
        } else if (attempts >= maxAttempts) {
            clearInterval(patchInterval);
            console.error('‚ùå Failed to patch: QuizManager not found after', maxAttempts, 'attempts');
        }
    }, 100);
    
})();
