// ROOM QUIZ VALIDATION & UPGRADE
// ƒê·∫£m b·∫£o quiz ƒë∆∞·ª£c t·∫£i l√™n ph√≤ng c√≥ ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√¢u h·ªèi
// ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng t·ª´ thi·∫øt b·ªã kh√°c nh·∫≠n ƒë·ªß c√¢u h·ªèi khi nh·∫≠p m√£ ph√≤ng

(function() {
    console.log('üîí [ROOM VALIDATION] Loading Room Quiz Validation & Upgrade...');

    // ƒê·ª£i RoomManager s·∫µn s√†ng
    function waitForRoomManager(callback) {
        const checkReady = () => {
            if (window.RoomManager && window.RoomManager.prototype) {
                callback();
            } else {
                setTimeout(checkReady, 100);
            }
        };
        checkReady();
    }

    waitForRoomManager(() => {
        console.log('‚úÖ [ROOM VALIDATION] RoomManager ready, applying upgrades...');

        // ============================================
        // 1. N√ÇNG C·∫§P: VALIDATE QUIZ KHI T·∫†O PH√íNG
        // ============================================
        const originalCreateRoom = window.RoomManager.prototype.createRoom;
        window.RoomManager.prototype.createRoom = async function() {
            try {
                // L·∫•y th√¥ng tin t·ª´ form
                const roomName = document.getElementById('room-name-input').value.trim();
                const roomCode = document.getElementById('room-code-input').value.trim();
                const roomDescription = document.getElementById('room-description-input').value.trim();
                const selectedQuizId = document.getElementById('room-quiz-selector').value;

                // Validate c∆° b·∫£n
                if (!roomName) {
                    this.showToast('Vui l√≤ng nh·∫≠p t√™n ph√≤ng!', 'warning');
                    document.getElementById('room-name-input').focus();
                    return;
                }

                if (!roomCode || roomCode.length !== 6 || !/^\d{6}$/.test(roomCode)) {
                    this.showToast('M√£ ph√≤ng ph·∫£i l√† 6 ch·ªØ s·ªë!', 'warning');
                    document.getElementById('room-code-input').focus();
                    return;
                }

                if (!selectedQuizId) {
                    this.showToast('Vui l√≤ng ch·ªçn ƒë·ªÅ thi!', 'warning');
                    document.getElementById('room-quiz-selector').focus();
                    return;
                }

                // L·∫•y quiz t·ª´ localStorage ho·∫∑c quizManager
                let quiz = null;
                
                // C√°ch 1: T·ª´ quizManager
                if (window.quizManager && window.quizManager.quizzes) {
                    quiz = window.quizManager.quizzes.find(q => q.id === selectedQuizId);
                }
                
                // C√°ch 2: T·ª´ localStorage (fallback)
                if (!quiz) {
                    try {
                        const storedQuizzes = localStorage.getItem('quizzes');
                        if (storedQuizzes) {
                            const quizzes = JSON.parse(storedQuizzes);
                            quiz = quizzes.find(q => q.id === selectedQuizId);
                        }
                    } catch (error) {
                        console.error('Error loading quiz from localStorage:', error);
                    }
                }
                
                if (!quiz) {
                    this.showToast('‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªÅ thi!', 'error');
                    return;
                }

                // ============================================
                // VALIDATION N√ÇNG CAO: KI·ªÇM TRA ƒê·∫¶Y ƒê·ª¶ C√ÇU H·ªéI
                // ============================================
                console.log('üîç [VALIDATION] Checking quiz completeness...');
                
                // Ki·ªÉm tra quiz c√≥ c√¢u h·ªèi kh√¥ng
                if (!quiz.questions || !Array.isArray(quiz.questions) || quiz.questions.length === 0) {
                    this.showToast('‚ùå ƒê·ªÅ thi kh√¥ng c√≥ c√¢u h·ªèi n√†o! Vui l√≤ng ch·ªçn ƒë·ªÅ kh√°c.', 'error');
                    console.error('‚ùå [VALIDATION] Quiz has no questions:', quiz);
                    return;
                }

                // Ki·ªÉm tra t·ª´ng c√¢u h·ªèi
                const invalidQuestions = [];
                for (let i = 0; i < quiz.questions.length; i++) {
                    const q = quiz.questions[i];
                    const questionNumber = i + 1;

                    // Ki·ªÉm tra c√¢u h·ªèi c√≥ text kh√¥ng
                    if (!q.question || q.question.trim() === '') {
                        invalidQuestions.push(`C√¢u ${questionNumber}: Thi·∫øu n·ªôi dung c√¢u h·ªèi`);
                        continue;
                    }

                    // Ki·ªÉm tra c√≥ options kh√¥ng
                    if (!q.options || !Array.isArray(q.options) || q.options.length < 2) {
                        invalidQuestions.push(`C√¢u ${questionNumber}: Thi·∫øu ƒë√°p √°n (c·∫ßn √≠t nh·∫•t 2 ƒë√°p √°n)`);
                        continue;
                    }

                    // Ki·ªÉm tra c√°c options c√≥ n·ªôi dung kh√¥ng
                    const emptyOptions = q.options.filter(opt => !opt || opt.trim() === '');
                    if (emptyOptions.length > 0) {
                        invalidQuestions.push(`C√¢u ${questionNumber}: C√≥ ƒë√°p √°n tr·ªëng`);
                        continue;
                    }

                    // Ki·ªÉm tra c√≥ ƒë√°p √°n ƒë√∫ng kh√¥ng
                    if (!q.correctAnswer || q.correctAnswer.trim() === '') {
                        invalidQuestions.push(`C√¢u ${questionNumber}: Thi·∫øu ƒë√°p √°n ƒë√∫ng`);
                        continue;
                    }

                    // Ki·ªÉm tra ƒë√°p √°n ƒë√∫ng c√≥ trong danh s√°ch options kh√¥ng
                    if (!q.options.includes(q.correctAnswer)) {
                        invalidQuestions.push(`C√¢u ${questionNumber}: ƒê√°p √°n ƒë√∫ng kh√¥ng c√≥ trong danh s√°ch ƒë√°p √°n`);
                        continue;
                    }
                }

                // N·∫øu c√≥ c√¢u h·ªèi kh√¥ng h·ª£p l·ªá, hi·ªÉn th·ªã chi ti·∫øt
                if (invalidQuestions.length > 0) {
                    const errorMessage = `‚ùå ƒê·ªÅ thi c√≥ ${invalidQuestions.length} c√¢u h·ªèi kh√¥ng h·ª£p l·ªá:\n\n` + 
                                       invalidQuestions.slice(0, 5).join('\n') +
                                       (invalidQuestions.length > 5 ? `\n... v√† ${invalidQuestions.length - 5} l·ªói kh√°c` : '');
                    
                    this.showToast('‚ùå ƒê·ªÅ thi kh√¥ng ƒë·∫ßy ƒë·ªß! Vui l√≤ng ki·ªÉm tra l·∫°i.', 'error');
                    
                    // Hi·ªÉn th·ªã chi ti·∫øt trong console
                    console.error('‚ùå [VALIDATION] Invalid questions found:');
                    invalidQuestions.forEach(err => console.error('  -', err));
                    
                    // Hi·ªÉn th·ªã alert v·ªõi chi ti·∫øt
                    setTimeout(() => {
                        alert(errorMessage + '\n\nVui l√≤ng s·ª≠a ƒë·ªÅ thi trong m·ª•c "Qu·∫£n L√Ω Quiz" tr∆∞·ªõc khi t·∫°o ph√≤ng.');
                    }, 500);
                    
                    return;
                }

                console.log(`‚úÖ [VALIDATION] Quiz is complete: ${quiz.questions.length} valid questions`);

                // Ki·ªÉm tra m√£ ph√≤ng ƒë√£ t·ªìn t·∫°i ch∆∞a
                const existingRoom = await this.checkRoomCodeExists(roomCode);
                if (existingRoom) {
                    this.showToast('‚ùå M√£ ph√≤ng ƒë√£ t·ªìn t·∫°i! Vui l√≤ng ch·ªçn m√£ kh√°c.', 'error');
                    return;
                }

                // T·∫°o b·∫£n sao s√¢u c·ªßa quiz ƒë·ªÉ ƒëÔøΩÔøΩÔøΩm b·∫£o d·ªØ li·ªáu kh√¥ng b·ªã thay ƒë·ªïi
                const quizCopy = JSON.parse(JSON.stringify(quiz));

                // T·∫°o room object v·ªõi quiz ƒë·∫ßy ƒë·ªß
                const room = {
                    id: Date.now().toString(),
                    name: roomName,
                    code: roomCode,
                    description: roomDescription || 'Kh√¥ng c√≥ m√¥ t·∫£',
                    quiz: {
                        id: quizCopy.id,
                        title: quizCopy.title,
                        description: quizCopy.description || '',
                        questions: quizCopy.questions, // ƒê·∫ßy ƒë·ªß t·∫•t c·∫£ c√¢u h·ªèi
                        totalQuestions: quizCopy.questions.length
                    },
                    creatorName: this.currentUserName || 'Ng∆∞·ªùi d√πng',
                    creatorId: this.getCreatorId(), // ID ng∆∞·ªùi t·∫°o
                    createdAt: new Date().toISOString(),
                    participants: 0,
                    attempts: 0,
                    leaderboard: []
                };

                // Log ƒë·ªÉ verify
                console.log('üì¶ [ROOM CREATE] Room data prepared:');
                console.log('  - Room name:', room.name);
                console.log('  - Room code:', room.code);
                console.log('  - Quiz title:', room.quiz.title);
                console.log('  - Total questions:', room.quiz.questions.length);
                console.log('  - Creator ID:', room.creatorId);

                this.showToast('üîÑ ƒêang t·∫°o ph√≤ng v·ªõi ƒë·ªÅ thi ƒë·∫ßy ƒë·ªß...', 'info');

                // L∆∞u l√™n Supabase n·∫øu c√≥
                if (this.isSupabaseAvailable) {
                    try {
                        const result = await this.saveRoomToSupabase(room);
                        if (result.success) {
                            room.id = result.id;
                            this.showToast('‚ú® T·∫°o ph√≤ng th√†nh c√¥ng! ƒê·ªÅ thi ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n ƒë·∫ßy ƒë·ªß.', 'success');
                            
                            // Clear form
                            this.clearRoomForm();
                            
                            // Reload rooms
                            await this.loadRooms();
                            
                            // Hi·ªÉn th·ªã chi ti·∫øt ph√≤ng
                            this.viewRoomDetails(room.id);
                            return;
                        }
                    } catch (error) {
                        console.error('Supabase save failed:', error);
                        this.showToast('‚ö†Ô∏è L·ªói Supabase, l∆∞u local...', 'warning');
                    }
                }

                // Fallback: L∆∞u local
                this.rooms.push(room);
                this.saveRoomsLocal();
                
                this.showToast('‚ú® T·∫°o ph√≤ng th√†nh c√¥ng (Local)! ƒê·ªÅ thi ƒë√£ ƒë∆∞·ª£c l∆∞u ƒë·∫ßy ƒë·ªß.', 'success');
                
                // Clear form
                this.clearRoomForm();
                
                // Reload rooms
                this.renderMyRooms();
                
                // Hi·ªÉn th·ªã chi ti·∫øt ph√≤ng
                this.viewRoomDetails(room.id);

            } catch (error) {
                console.error('‚ùå [ROOM CREATE] Error:', error);
                this.showToast('‚ùå L·ªói khi t·∫°o ph√≤ng: ' + error.message, 'error');
            }
        };

        console.log('‚úÖ [ROOM VALIDATION] createRoom upgraded with validation');

        // ============================================
        // 2. N√ÇNG C·∫§P: LOAD ROOMS - CH·ªà HI·ªÇN TH·ªä PH√íNG C·ª¶A NG∆Ø·ªúI T·∫†O
        // ============================================
        const originalLoadRooms = window.RoomManager.prototype.loadRooms;
        window.RoomManager.prototype.loadRooms = async function() {
            try {
                this.showLoading(true);

                const currentCreatorId = this.getCreatorId();
                console.log('üîç [LOAD ROOMS] Loading rooms for creator:', currentCreatorId);

                // ∆Øu ti√™n Supabase
                if (this.isSupabaseAvailable) {
                    try {
                        // Ch·ªâ l·∫•y ph√≤ng c·ªßa ng∆∞·ªùi t·∫°o hi·ªán t·∫°i
                        const { data, error } = await window.supabaseQuizManager.supabase
                            .from('exam_rooms')
                            .select('*')
                            .eq('creator_id', currentCreatorId)
                            .order('created_at', { ascending: false });

                        if (!error && data) {
                            this.rooms = data.map(room => ({
                                id: room.id,
                                name: room.name,
                                code: room.code,
                                description: room.description,
                                quiz: room.quiz_data,
                                creatorName: room.creator_name,
                                creatorId: room.creator_id,
                                createdAt: room.created_at,
                                participants: room.participants || 0,
                                attempts: room.attempts || 0,
                                leaderboard: room.leaderboard || []
                            }));

                            console.log(`‚úÖ [LOAD ROOMS] Loaded ${this.rooms.length} rooms from Supabase`);
                            this.renderMyRooms();
                            this.showLoading(false);
                            return;
                        }
                    } catch (error) {
                        console.warn('‚ö†Ô∏è [LOAD ROOMS] Supabase load failed:', error);
                    }
                }

                // Fallback: Load t·ª´ local v√† filter theo creator
                this.loadRoomsLocal();
                
                // Filter ch·ªâ l·∫•y ph√≤ng c·ªßa ng∆∞·ªùi t·∫°o hi·ªán t·∫°i
                this.rooms = this.rooms.filter(room => {
                    // N·∫øu room kh√¥ng c√≥ creatorId (ph√≤ng c≈©), g√°n creatorId hi·ªán t·∫°i
                    if (!room.creatorId) {
                        room.creatorId = currentCreatorId;
                        return true;
                    }
                    return room.creatorId === currentCreatorId;
                });

                // L∆∞u l·∫°i sau khi filter
                this.saveRoomsLocal();

                console.log(`‚úÖ [LOAD ROOMS] Loaded ${this.rooms.length} rooms from local storage`);
                this.renderMyRooms();

            } catch (error) {
                console.error('‚ùå [LOAD ROOMS] Error:', error);
                this.showToast('‚ùå L·ªói khi t·∫£i danh s√°ch ph√≤ng', 'error');
            } finally {
                this.showLoading(false);
            }
        };

        console.log('‚úÖ [ROOM VALIDATION] loadRooms upgraded with creator filter');

        // ============================================
        // 3. N√ÇNG C·∫§P: JOIN ROOM - VERIFY QUIZ DATA ƒê·∫¶Y ƒê·ª¶
        // ============================================
        const originalJoinRoom = window.RoomManager.prototype.joinRoom;
        window.RoomManager.prototype.joinRoom = async function() {
            try {
                const code = document.getElementById('join-room-code-input').value.trim();

                if (!code) {
                    this.showToast('Vui l√≤ng nh·∫≠p m√£ ph√≤ng!', 'warning');
                    return;
                }

                if (code.length !== 6 || !/^\d{6}$/.test(code)) {
                    this.showToast('M√£ ph√≤ng ph·∫£i l√† 6 ch·ªØ s·ªë!', 'warning');
                    return;
                }

                this.showToast('üîç ƒêang t√¨m ph√≤ng...', 'info');

                // T√¨m ph√≤ng trong Supabase (KH√îNG filter theo creator_id)
                let room = null;
                if (this.isSupabaseAvailable) {
                    try {
                        const { data, error } = await window.supabaseQuizManager.supabase
                            .from('exam_rooms')
                            .select('*')
                            .eq('code', code)
                            .single();

                        if (!error && data) {
                            room = {
                                id: data.id,
                                name: data.name,
                                code: data.code,
                                description: data.description,
                                quiz: data.quiz_data,
                                creatorName: data.creator_name,
                                creatorId: data.creator_id,
                                createdAt: data.created_at,
                                participants: data.participants || 0,
                                attempts: data.attempts || 0,
                                leaderboard: data.leaderboard || []
                            };

                            console.log('‚úÖ [JOIN ROOM] Found room from Supabase');
                        }
                    } catch (error) {
                        console.warn('‚ö†Ô∏è [JOIN ROOM] Supabase search failed:', error);
                    }
                }

                // Fallback: T√¨m trong t·∫•t c·∫£ local rooms (kh√¥ng filter)
                if (!room) {
                    const allLocalRooms = JSON.parse(localStorage.getItem('examRooms') || '[]');
                    room = allLocalRooms.find(r => r.code === code);
                    
                    if (room) {
                        console.log('‚úÖ [JOIN ROOM] Found room from local storage');
                    }
                }

                if (!room) {
                    this.showToast('‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng v·ªõi m√£ n√†y!', 'error');
                    return;
                }

                // ============================================
                // VALIDATION: KI·ªÇM TRA QUIZ DATA ƒê·∫¶Y ƒê·ª¶
                // ============================================
                console.log('üîç [JOIN ROOM] Validating quiz data...');
                
                if (!room.quiz || !room.quiz.questions || room.quiz.questions.length === 0) {
                    this.showToast('‚ùå Ph√≤ng thi kh√¥ng c√≥ c√¢u h·ªèi! Vui l√≤ng li√™n h·ªá ng∆∞·ªùi t·∫°o ph√≤ng.', 'error');
                    console.error('‚ùå [JOIN ROOM] Room has no quiz data:', room);
                    return;
                }

                // Ki·ªÉm tra t·ª´ng c√¢u h·ªèi
                let validQuestions = 0;
                for (const q of room.quiz.questions) {
                    if (q.question && q.options && q.options.length >= 2 && q.correctAnswer) {
                        validQuestions++;
                    }
                }

                if (validQuestions === 0) {
                    this.showToast('‚ùå Ph√≤ng thi kh√¥ng c√≥ c√¢u h·ªèi h·ª£p l·ªá!', 'error');
                    console.error('‚ùå [JOIN ROOM] No valid questions found');
                    return;
                }

                console.log(`‚úÖ [JOIN ROOM] Quiz validated: ${validQuestions}/${room.quiz.questions.length} valid questions`);

                // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu c√≥ c√¢u h·ªèi kh√¥ng h·ª£p l·ªá
                if (validQuestions < room.quiz.questions.length) {
                    this.showToast(`‚ö†Ô∏è Ph√≤ng c√≥ ${validQuestions}/${room.quiz.questions.length} c√¢u h·ªèi h·ª£p l·ªá`, 'warning');
                }

                // Hi·ªÉn th·ªã chi ti·∫øt ph√≤ng
                this.showRoomDetailsModal(room);

                // Clear input
                document.getElementById('join-room-code-input').value = '';

                this.showToast(`‚úÖ T√¨m th·∫•y ph√≤ng: ${room.name}`, 'success');

            } catch (error) {
                console.error('‚ùå [JOIN ROOM] Error:', error);
                this.showToast('‚ùå L·ªói khi t√¨m ph√≤ng', 'error');
            }
        };

        console.log('‚úÖ [ROOM VALIDATION] joinRoom upgraded with validation');

        // ============================================
        // 4. N√ÇNG C·∫§P: START QUIZ - VERIFY TR∆Ø·ªöC KHI B·∫ÆT ƒê·∫¶U
        // ============================================
        const originalStartQuizWithUserName = window.RoomManager.prototype.startQuizWithUserName;
        window.RoomManager.prototype.startQuizWithUserName = function(room, userName) {
            // Ki·ªÉm tra quiz data tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
            if (!room || !room.quiz || !room.quiz.questions || room.quiz.questions.length === 0) {
                this.showToast('‚ùå Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu: D·ªØ li·ªáu quiz kh√¥ng h·ª£p l·ªá!', 'error');
                console.error('‚ùå [START QUIZ] Invalid quiz data:', room);
                return;
            }

            console.log('üéØ [START QUIZ] Starting quiz with full data:');
            console.log('  - Room:', room.name);
            console.log('  - Quiz:', room.quiz.title);
            console.log('  - Questions:', room.quiz.questions.length);
            console.log('  - User:', userName);

            // T·∫°o b·∫£n sao s√¢u ƒë·ªÉ b·∫£o v·ªá d·ªØ li·ªáu
            const protectedRoom = JSON.parse(JSON.stringify(room));
            protectedRoom.userName = userName;

            // G·ªçi h√†m g·ªëc v·ªõi d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c b·∫£o v·ªá
            originalStartQuizWithUserName.call(this, protectedRoom, userName);
        };

        console.log('‚úÖ [ROOM VALIDATION] startQuizWithUserName upgraded with verification');

        // ============================================
        // 5. MONITOR & AUTO-FIX
        // ============================================
        
        // Monitor quiz data trong quizManager
        setInterval(() => {
            if (window.quizManager && 
                window.quizManager.currentQuiz && 
                window.quizManager.currentQuiz.isRoomQuiz) {
                
                // Ki·ªÉm tra quiz data c√≤n ƒë·∫ßy ƒë·ªß kh√¥ng
                if (!window.quizManager.currentQuiz.questions || 
                    window.quizManager.currentQuiz.questions.length === 0) {
                    
                    console.warn('‚ö†Ô∏è [MONITOR] Room quiz data lost, attempting restore...');
                    
                    // Th·ª≠ restore t·ª´ backup
                    if (window.quizManager._quizBackup && 
                        window.quizManager._quizBackup.questions &&
                        window.quizManager._quizBackup.questions.length > 0) {
                        
                        window.quizManager.currentQuiz = JSON.parse(JSON.stringify(window.quizManager._quizBackup));
                        console.log('‚úÖ [MONITOR] Restored quiz data from backup');
                    }
                }
            }
        }, 2000);

        console.log('‚úÖ [ROOM VALIDATION] Monitor started');

        // ============================================
        // HO√ÄN T·∫§T
        // ============================================
        console.log('‚úÖ [ROOM VALIDATION] All upgrades applied successfully!');
        console.log('üìã [ROOM VALIDATION] Features:');
        console.log('  ‚úì Quiz validation when creating room');
        console.log('  ‚úì Only show rooms created by current user');
        console.log('  ‚úì Verify quiz data when joining room');
        console.log('  ‚úì Protect quiz data when starting quiz');
        console.log('  ‚úì Auto-monitor and restore quiz data');
    });
})();
