// ============================================================================
// SIMPLE FIX - LO·∫†I B·ªé T·∫§T C·∫¢ CODE PH·ª®C T·∫†P
// ============================================================================
// Ch·ªâ gi·ªØ l·∫°i nh·ªØng g√¨ c·∫ßn thi·∫øt nh·∫•t
// ============================================================================

(function() {
    console.log('üîß SIMPLE FIX LOADING...');
    
    // ƒê·ª£i t·∫•t c·∫£ load xong
    const waitForReady = setInterval(() => {
        if (window.quizManager && window.roomManager && window.supabaseQuizManager) {
            clearInterval(waitForReady);
            applySimpleFix();
        }
    }, 500);
    
    function applySimpleFix() {
        console.log('‚úÖ Managers ready, applying simple fix...');
        
        // ============================================================================
        // FIX 1: ƒê·∫¢M B·∫¢O L∆ØU K·∫æT QU·∫¢ V√ÄO LEADERBOARD
        // ============================================================================
        
        // Override submitQuiz ƒë·ªÉ FORCE l∆∞u k·∫øt qu·∫£
        if (window.QuizManager && window.QuizManager.prototype.submitQuiz) {
            const originalSubmit = window.QuizManager.prototype.submitQuiz;
            
            window.QuizManager.prototype.submitQuiz = function() {
                console.log('üìù submitQuiz called');
                
                // L∆∞u quiz data tr∆∞·ªõc khi submit
                const quizBackup = this.currentQuiz ? JSON.parse(JSON.stringify(this.currentQuiz)) : null;
                
                // G·ªçi h√†m g·ªëc
                originalSubmit.call(this);
                
                // ƒê·ª£i 2 gi√¢y r·ªìi FORCE l∆∞u k·∫øt qu·∫£
                setTimeout(() => {
                    console.log('üîç Checking room quiz...');
                    
                    const quiz = quizBackup || this.currentQuiz;
                    const results = this.currentResults;
                    
                    console.log('Quiz:', quiz);
                    console.log('Results:', results);
                    
                    if (quiz && quiz.isRoomQuiz && quiz.roomId && quiz.userName && results) {
                        console.log('‚úÖ This is a room quiz, saving to leaderboard...');
                        
                        forceSaveToLeaderboard(quiz.roomId, {
                            userName: quiz.userName,
                            score: results.score,
                            correctCount: results.correctCount,
                            totalQuestions: results.totalQuestions,
                            totalTime: results.totalTime
                        });
                    } else {
                        console.warn('‚ö†Ô∏è Not a room quiz or missing data');
                        console.warn('- isRoomQuiz:', quiz?.isRoomQuiz);
                        console.warn('- roomId:', quiz?.roomId);
                        console.warn('- userName:', quiz?.userName);
                        console.warn('- results:', results);
                    }
                }, 2000);
            };
            
            console.log('‚úÖ submitQuiz override applied');
        }
        
        // ============================================================================
        // FIX 2: H√ÄM L∆ØU K·∫æT QU·∫¢ ƒê∆†N GI·∫¢N
        // ============================================================================
        
        async function forceSaveToLeaderboard(roomId, result) {
            console.log('üíæ forceSaveToLeaderboard called');
            console.log('Room ID:', roomId);
            console.log('Result:', result);
            
            try {
                // Validate
                if (!roomId || !result || !result.userName) {
                    console.error('‚ùå Invalid data');
                    return;
                }
                
                // Check Supabase
                if (!window.supabaseQuizManager || !window.supabaseQuizManager.supabase) {
                    console.error('‚ùå Supabase not available');
                    alert('L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi Supabase');
                    return;
                }
                
                const supabase = window.supabaseQuizManager.supabase;
                
                // T·∫°o entry
                const entry = {
                    userName: result.userName,
                    score: result.score || 0,
                    correctCount: result.correctCount || 0,
                    totalQuestions: result.totalQuestions || 0,
                    time: result.totalTime || 0,
                    completedAt: new Date().toISOString()
                };
                
                console.log('Entry:', entry);
                
                // L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i
                console.log('Fetching current data...');
                const { data: currentData, error: fetchError } = await supabase
                    .from('exam_rooms')
                    .select('leaderboard, attempts')
                    .eq('id', roomId)
                    .single();
                
                if (fetchError) {
                    console.error('‚ùå Fetch error:', fetchError);
                    alert('L·ªói khi l·∫•y d·ªØ li·ªáu: ' + fetchError.message);
                    return;
                }
                
                console.log('Current data:', currentData);
                
                if (!currentData) {
                    console.error('‚ùå No data found');
                    alert('Kh√¥ng t√¨m th·∫•y ph√≤ng thi');
                    return;
                }
                
                // C·∫≠p nh·∫≠t leaderboard
                let leaderboard = currentData.leaderboard || [];
                console.log('Current leaderboard:', leaderboard);
                
                // T√¨m user
                const existingIndex = leaderboard.findIndex(e => e.userName === entry.userName);
                
                if (existingIndex >= 0) {
                    console.log('User exists, updating...');
                    if (entry.score > leaderboard[existingIndex].score) {
                        leaderboard[existingIndex] = entry;
                        console.log('Score improved');
                    } else {
                        console.log('Score not improved, keeping old');
                    }
                } else {
                    console.log('New user, adding...');
                    leaderboard.push(entry);
                }
                
                // T√≠nh participants
                const uniqueUsers = new Set(leaderboard.map(e => e.userName));
                const participants = uniqueUsers.size;
                const attempts = (currentData.attempts || 0) + 1;
                
                console.log('New leaderboard:', leaderboard);
                console.log('Participants:', participants);
                console.log('Attempts:', attempts);
                
                // L∆∞u v√†o database
                console.log('Saving to database...');
                const { error: updateError } = await supabase
                    .from('exam_rooms')
                    .update({
                        leaderboard: leaderboard,
                        participants: participants,
                        attempts: attempts
                    })
                    .eq('id', roomId);
                
                if (updateError) {
                    console.error('‚ùå Update error:', updateError);
                    alert('L·ªói khi l∆∞u: ' + updateError.message);
                    return;
                }
                
                console.log('‚úÖ SAVED SUCCESSFULLY!');
                alert('‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o b·∫£ng x·∫øp h·∫°ng!\n\nNg∆∞·ªùi t·∫°o ph√≤ng c·∫ßn:\n1. ƒê√≥ng modal "Xem chi ti·∫øt"\n2. M·ªü l·∫°i ƒë·ªÉ th·∫•y k·∫øt qu·∫£ m·ªõi');
                
            } catch (error) {
                console.error('‚ùå Exception:', error);
                alert('L·ªói: ' + error.message);
            }
        }
        
        // ============================================================================
        // FIX 3: ƒê·∫¢M B·∫¢O QUIZ DATA KH√îNG B·ªä M·∫§T
        // ============================================================================
        
        if (window.roomManager && window.roomManager.startQuizWithUserName) {
            const originalStart = window.roomManager.startQuizWithUserName;
            
            window.roomManager.startQuizWithUserName = function(room, userName) {
                console.log('üéØ startQuizWithUserName called');
                console.log('Room:', room);
                console.log('User:', userName);
                
                // G·ªçi h√†m g·ªëc
                const result = originalStart.call(this, room, userName);
                
                // Verify sau 1 gi√¢y
                setTimeout(() => {
                    console.log('üîç Verifying quiz data...');
                    
                    if (!window.quizManager.currentQuiz) {
                        console.error('‚ùå currentQuiz is null!');
                        alert('L·ªói: Kh√¥ng th·ªÉ load b√†i thi. Vui l√≤ng th·ª≠ l·∫°i!');
                        return;
                    }
                    
                    // ƒê·∫£m b·∫£o c√≥ ƒë·ªß th√¥ng tin
                    if (!window.quizManager.currentQuiz.isRoomQuiz) {
                        window.quizManager.currentQuiz.isRoomQuiz = true;
                    }
                    if (!window.quizManager.currentQuiz.roomId) {
                        window.quizManager.currentQuiz.roomId = room.id;
                    }
                    if (!window.quizManager.currentQuiz.userName) {
                        window.quizManager.currentQuiz.userName = userName;
                    }
                    
                    console.log('‚úÖ Quiz data verified:', {
                        isRoomQuiz: window.quizManager.currentQuiz.isRoomQuiz,
                        roomId: window.quizManager.currentQuiz.roomId,
                        userName: window.quizManager.currentQuiz.userName
                    });
                    
                    // Backup
                    localStorage.setItem('currentRoomQuiz', JSON.stringify(window.quizManager.currentQuiz));
                    console.log('‚úÖ Quiz backed up to localStorage');
                    
                }, 1000);
                
                return result;
            };
            
            console.log('‚úÖ startQuizWithUserName override applied');
        }
        
        // ============================================================================
        // FIX 4: FIX updateAnswerModern
        // ============================================================================
        
        if (window.QuizManager && window.QuizManager.prototype.updateAnswerModern) {
            const originalUpdate = window.QuizManager.prototype.updateAnswerModern;
            
            window.QuizManager.prototype.updateAnswerModern = function(questionIndex, selectedAnswer) {
                // Ki·ªÉm tra currentQuiz
                if (!this.currentQuiz) {
                    console.error('‚ùå currentQuiz is null, trying to restore...');
                    
                    // Th·ª≠ restore
                    try {
                        const backup = localStorage.getItem('currentRoomQuiz');
                        if (backup) {
                            this.currentQuiz = JSON.parse(backup);
                            console.log('‚úÖ Restored from localStorage');
                        } else {
                            console.error('‚ùå No backup found');
                            return;
                        }
                    } catch (e) {
                        console.error('‚ùå Restore failed:', e);
                        return;
                    }
                }
                
                // G·ªçi h√†m g·ªëc
                return originalUpdate.call(this, questionIndex, selectedAnswer);
            };
            
            console.log('‚úÖ updateAnswerModern fixed');
        }
        
        console.log('üéâ SIMPLE FIX APPLIED!');
        console.log('üìù Khi n·ªôp b√†i, k·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông');
        console.log('üìù Ng∆∞·ªùi t·∫°o ph√≤ng c·∫ßn ƒë√≥ng/m·ªü l·∫°i modal ƒë·ªÉ th·∫•y k·∫øt qu·∫£');
    }
})();
