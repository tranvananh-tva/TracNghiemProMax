// ============================================
// PATCH: S·ª≠a l·ªói x√≥a b√†i trong Kh√°m Ph√° ƒê·ªÅ Thi
// ============================================
// Thay th·∫ø h√†m deleteQuiz trong explore-quiz.js

// X√≥a quiz - PHI√äN B·∫¢N ƒê√É S·ª¨A
async deleteQuiz(quizId) {
    try {
        // ƒê√≥ng modal
        document.querySelector('.confirm-delete-modal')?.remove();
        
        // L·∫•y th√¥ng tin quiz
        const quiz = this.sharedQuizzes.find(q => q.id === quizId);
        
        if (!quiz) {
            quizManager.showToast('Kh√¥ng t√¨m th·∫•y quiz!', 'error');
            return;
        }
        
        // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
        if (!this.isQuizOwner(quiz)) {
            quizManager.showToast('B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b√†i n√†y!', 'error');
            return;
        }
        
        quizManager.showToast('üîÑ ƒêang x√≥a b√†i...', 'info');
        
        let deleteSuccess = false;
        
        // Th·ª≠ x√≥a t·ª´ Supabase tr∆∞·ªõc
        if (this.isSupabaseAvailable && window.supabaseQuizManager) {
            try {
                const result = await window.supabaseQuizManager.deleteQuiz(quizId);
                if (result.success) {
                    deleteSuccess = true;
                    console.log('‚úÖ Deleted from Supabase');
                }
            } catch (error) {
                console.warn('Supabase delete failed, trying local server:', error);
            }
        }
        
        // Fallback sang Local Server
        if (!deleteSuccess && this.isServerOnline) {
            try {
                const response = await fetch(`${this.API_BASE_URL}/shared-quizzes/${quizId}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    deleteSuccess = true;
                    console.log('‚úÖ Deleted from Local Server');
                }
            } catch (error) {
                console.warn('Local server delete failed:', error);
            }
        }
        
        // ‚≠ê‚≠ê‚≠ê QUAN TR·ªåNG: LU√îN x√≥a kh·ªèi localStorage ‚≠ê‚≠ê‚≠ê
        // ƒê√¢y l√† fix ch√≠nh ƒë·ªÉ b√†i kh√¥ng xu·∫•t hi·ªán l·∫°i khi refresh
        let offlineQuizzes = JSON.parse(localStorage.getItem('offlineSharedQuizzes')) || [];
        const beforeCount = offlineQuizzes.length;
        
        // X√≥a theo c·∫£ id v√† originalId (ƒë·ªÉ ƒë·∫£m b·∫£o x√≥a h·∫øt)
        offlineQuizzes = offlineQuizzes.filter(q => {
            return q.id !== quizId && q.originalId !== quizId;
        });
        
        const afterCount = offlineQuizzes.length;
        
        // L∆∞u l·∫°i localStorage
        localStorage.setItem('offlineSharedQuizzes', JSON.stringify(offlineQuizzes));
        
        if (beforeCount > afterCount) {
            console.log(`‚úÖ Deleted from localStorage (${beforeCount} -> ${afterCount} quizzes)`);
        } else {
            console.log('‚ÑπÔ∏è Quiz not found in localStorage');
        }
        
        // X√≥a kh·ªèi danh s√°ch hi·ªán t·∫°i trong memory
        const beforeMemoryCount = this.sharedQuizzes.length;
        this.sharedQuizzes = this.sharedQuizzes.filter(q => q.id !== quizId);
        const afterMemoryCount = this.sharedQuizzes.length;
        
        console.log(`‚úÖ Deleted from memory (${beforeMemoryCount} -> ${afterMemoryCount} quizzes)`);
        
        // Render l·∫°i danh s√°ch
        this.renderSharedQuizzes(this.sharedQuizzes);
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        if (deleteSuccess) {
            quizManager.showToast('‚úÖ ƒê√£ x√≥a b√†i th√†nh c√¥ng!', 'success');
        } else {
            quizManager.showToast('‚úÖ ƒê√£ x√≥a b√†i kh·ªèi m√°y n√†y!', 'success');
        }
        
        // Log ƒë·ªÉ debug
        console.log('üìä Delete Summary:', {
            quizId: quizId,
            deletedFromServer: deleteSuccess,
            deletedFromLocalStorage: beforeCount > afterCount,
            deletedFromMemory: beforeMemoryCount > afterMemoryCount,
            remainingQuizzes: this.sharedQuizzes.length
        });
        
    } catch (error) {
        console.error('‚ùå Error deleting quiz:', error);
        quizManager.showToast('‚ùå L·ªói khi x√≥a b√†i!', 'error');
    }
}
